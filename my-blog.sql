/*
 Navicat MySQL Data Transfer

 Source Server         : test
 Source Server Type    : MySQL
 Source Server Version : 80019
 Source Host           : localhost:3306
 Source Schema         : my-blog

 Target Server Type    : MySQL
 Target Server Version : 80019
 File Encoding         : 65001

 Date: 24/07/2021 16:58:07
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for blogs
-- ----------------------------
DROP TABLE IF EXISTS `blogs`;
CREATE TABLE `blogs`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `like` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `Reading` int NOT NULL,
  `Blogcontent` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `Blogtitle` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `releaseTime` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `Author` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `BlogIntroduction` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `deletedAt` datetime NULL DEFAULT NULL,
  `Grammar` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 112 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blogs
-- ----------------------------
INSERT INTO `blogs` VALUES (93, '5', 34, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h1><a id=\"fs_0\"></a>fs</h1> \n<ol><li><code>fs.readFile(文件路径，文件解析格式，callback)</code></li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'./1.txt\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'utf-8\'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span>file<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706193330573.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ol start=\"2\"><li><code>fs.writeFile(文件路径，需写文件内容，{flag:\'a\'},callback)</code></li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'./1.txt\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'123\'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>flag<span class=\"token punctuation\">:</span><span class=\"token string\">\'a\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'写入成功\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706195104302.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ol start=\"3\"><li><code>fs.stat()文件信息</code></li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'./1.txt\'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span>stats<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/2021070619525992.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ul><li>1<code>size占用字节</code></li><li>2<code>atime上次访问的时间</code></li><li>3<code>mtime上次文件内容被修改时间</code></li><li>4<code>ctime上次文件状态被修改的时间</code></li><li>5<code>bithtime文件创建时间</code></li><li>6<code>isDirectory()判断是否是目录</code></li><li>7<code>isFile()判断是否是目录</code></li></ul> \n<ol start=\"4\"><li><code>fs.readdir获取目录中的文件和子目录</code></li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'./data\'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span>file<span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706200350225.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706200310647.jpg#pic_center\" alt=\"在这里插入图片描述\"></p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'node.js文件fs模块', '2021-07-06 20:04:45', 'ljh', 'fsfs.readFile(文件路径，文件解析格式，callback)let fs = require(\"fs\");fs.readFile(\'./1.txt\',\'utf-8\',(err,file)=>{    console.log(file);})fs.writeFile(文件路径，需写文件内容，{flag:\'a\'},callback)let fs = require(\"fs\");fs.writeFile(\'./1.txt\',\'123\',{flag:\'a\'},(err)=', NULL, NULL);
INSERT INTO `blogs` VALUES (94, '8', 55, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_0\"></a>增</h2> \n<ul><li>什么是增，就是点击添加用户的时候获取所有需要设置用户的信息进行添加</li></ul> \n<ol><li>首先获取所有需要设置用户的信息，input.value值</li><li>创建一个对象，该对象里面的属性和属性值就是获取的每一个需要设置的input.value值</li><li>new一个构造函数通过该函数传入上面对象，在构造函数里面创建一个方法，该方法是来用来增的</li><li>通过设置事件点击click来触发该new一个构造出来的实例对象来触发该方法</li></ol> \n<pre><code class=\"prism language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">fun4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n  <span class=\"token comment\">//这里可用循环写</span>\n  <span class=\"token comment\">//获取所有用户输入值</span>\n            <span class=\"token keyword\">var</span> ipt0 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> ipt1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> ipt2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> ipt3 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> ipt4 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> ipt5 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> ipt6 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> ipt7 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//把用户输入的值存入该对象</span>\n            <span class=\"token keyword\">var</span> he1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token string\">\"学号\"</span> <span class=\"token punctuation\">:</span> ipt0<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"姓名\"</span> <span class=\"token punctuation\">:</span> ipt1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"性别\"</span> <span class=\"token punctuation\">:</span> ipt2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"年龄\"</span> <span class=\"token punctuation\">:</span> ipt3<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"生日\"</span> <span class=\"token punctuation\">:</span> ipt4<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"手机号\"</span> <span class=\"token punctuation\">:</span> ipt5<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"籍贯\"</span> <span class=\"token punctuation\">:</span> ipt6<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"描述\"</span> <span class=\"token punctuation\">:</span> ipt7<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//通过new构造的函数</span>\n            <span class=\"token keyword\">function</span> <span class=\"token function\">He</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">var</span> son2  <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"son2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">//添加用户方法</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">pait</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                ul<span class=\"token punctuation\">.</span>className<span class=\"token operator\">=</span><span class=\"token string\">\"Ul1\"</span>\n                <span class=\"token keyword\">var</span> iptt1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> span3 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                span3<span class=\"token punctuation\">.</span>className<span class=\"token operator\">=</span><span class=\"token string\">\"sp3\"</span>\n                iptt1<span class=\"token punctuation\">.</span>type<span class=\"token operator\">=</span><span class=\"token string\">\"checkbox\"</span>\n                iptt1<span class=\"token punctuation\">.</span>checked<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                iptt1<span class=\"token punctuation\">.</span>className<span class=\"token operator\">=</span><span class=\"token string\">\"input5\"</span>\n                span3<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>iptt1<span class=\"token punctuation\">)</span>\n                ul<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>span3<span class=\"token punctuation\">)</span>\n                son2<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>ul<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">var</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    li<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    ul<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">var</span> span <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> span1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                span<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"修改\"</span><span class=\"token punctuation\">;</span>\n                span1<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"删除\"</span>\n                span<span class=\"token punctuation\">.</span>className<span class=\"token operator\">=</span><span class=\"token string\">\"spp1\"</span>\n                span1<span class=\"token punctuation\">.</span>className<span class=\"token operator\">=</span><span class=\"token string\">\"spp1\"</span>\n                ul<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span>\n                ul<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>span1<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">}</span>\n                \n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">He</span><span class=\"token punctuation\">(</span>he1<span class=\"token punctuation\">)</span>\n            now<span class=\"token punctuation\">.</span><span class=\"token function\">pait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210516180530519.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ol start=\"5\"><li>这里面的每一行都是一个ul然后里面是li通过提前设置的好的样式浮动，上面的代码可以看出来设置好用户的姓名等等的信息之后点击添加用户，就会触发构造函数里面的方法，获取所有设置的值进行添加到每一个li里面去，该方法里面的所有元素创建都是实时的，获取值也必须是实时获取</li></ol> \n<h1><a id=\"_71\"></a>删除</h1> \n<p>-什么是删，就是点击删除之后需要删除这一行，删除是很简单很好理解的，因为每一行是一个ul就点击删除的时候通过this获取父级元素进行删除</p> \n<ol><li>这是一个封装的功能函数，给删除设置点击事件进行触发该函数进行删除</li><li>给所有的删除元素进行循环添加点击事件</li><li>然后通过if判断tihs.innerHTML == \"删除\"是否是true是就进行删除</li><li>删除元素可以用display：none和remove都可以</li></ol> \n<pre><code class=\"prism language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">var</span> spp1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spp1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> lione <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lione\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> ipt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> btn2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">var</span> father2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"father2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//循环添加点击事件</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>spp1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                spp1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">//判断当前点击的元素innerHTML值是否为删除</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">==</span> <span class=\"token string\">\"删除\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">//判断前面多选框是否为true</span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>checked <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display<span class=\"token operator\">=</span><span class=\"token string\">\"none\"</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">==</span> <span class=\"token string\">\"修改\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token function\">fms</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n                        str <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n                        father2<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display<span class=\"token operator\">=</span><span class=\"token string\">\"block\"</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// for(let j = 0;j&lt;this.parentNode.childNodes.length;j++){<!-- --></span>\n                        <span class=\"token comment\">//     console.log(this.parentNode.childNodes[j].innerHTML);</span>\n                        <span class=\"token comment\">// }</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">var</span>  str2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//点击全选给所有多选框添加true</span>\n            lione<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                str2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str2<span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>ipt<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                            ipt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>checked<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>\n                    <span class=\"token punctuation\">}</span>\n                    btn2<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display<span class=\"token operator\">=</span><span class=\"token string\">\"block\"</span>\n                    <span class=\"token comment\">//点击全选之后显示删除所有用户</span>\n                    btn2<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>ipt<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ipt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>checked <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                            ipt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display<span class=\"token operator\">=</span><span class=\"token string\">\"none\"</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                 <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>ipt<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                            ipt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>checked<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>\n                    <span class=\"token punctuation\">}</span>\n                    btn2<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display<span class=\"token operator\">=</span><span class=\"token string\">\"none\"</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210516181852891.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p><img src=\"https://img-blog.csdnimg.cn/20210516181806653.gif#pic_center\" alt=\"在这里插入图片描述\"><br> 5. 可以通过上面动态图看出来有全选删除，和单个删除<br> 6. 单个删除：可以看出来我多加了一个判断全面的多选框是否为true为true才能删除<br> 7. 全选删除：点击全选之后给所有的多选框加入true，然后显示删除所有用户</p> \n<h2><a id=\"_138\"></a>下期讲改和查，比较前两个有点难度</h2>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '1-原生JS写增删改查', '2021-05-16 18:24:39', 'ljh', '改什么是改，点击修改的时候需要修改当前学生的所有信息在这里插入代码片', NULL, NULL);
INSERT INTO `blogs` VALUES (95, '5', 132, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"Promise_0\"></a>Promise简单介绍</h2> \n<ol><li>是ES6为了解决回调地狱的问题出现，其实也没有真正的解决</li><li><code>Promise</code>一共分为两个阶段①未决阶段<code>unsettled</code>和已决阶段<code>settled</code></li><li>异步事情是从未决到已决阶段，而未决阶段控制着通往已决阶段的能力，能够控制一个事情的走向</li><li>而ES6又将<code>Promise</code>分为三种状态<code>pedding resolved rejected</code>①等待阶段②已处理阶段，可以按照正常逻辑进行下去③已拒绝阶段，无法按照正常逻辑走下去。后两种都属于已决阶段</li><li>把状态走向两个已决阶段时可能会传递一些数据①已处理阶段，带出的数据一般为真实有效数据②已拒绝阶段，带出的数据一般是错误信息</li><li>！！不论进行到那个阶段都是无法逆转的</li><li>一般事情走到了已决阶段，不同的已决阶段会进行不同的后续处理方式</li></ol> \n<h2><a id=\"promiseajax_8\"></a>看一看如果利用promise解决ajax异步</h2> \n<ol><li>封装一个函数<code>ajax</code>通过函数接受一些参数，<code>return</code>出去<code>new Promise((resolve, reject) =&gt; {}</code></li><li>通过异步<code>ajax</code>推向事情走向那个已决阶段来进行进一步的事情处理</li><li><code>resolve已决阶段已处理</code>调用该函数传入<code>ajax</code>返回来的数据</li><li><code>reject已决阶段已拒绝</code>对错误信息进行处理</li><li>每次调用<code>resolve</code>函数都会走向<code>then</code>方法第一个参数进行处理，处理完成后通过<code>return fn(\"./1.json\", names);</code>调用<code>ajax</code>函数进行请求数据</li><li>每次在<code>then</code>方法第一个参数进行处理时<code>return</code>之后在后面进行像<code>jquery</code>那样打点链式调用进行处理</li></ol> \n<h2><a id=\"__15\"></a>打点链式调案例 ：</h2> \n<pre><code class=\"prism language-javascript\">          <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> names</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n                    type<span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n                    dataType<span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n                    url<span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span>\n                    <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有找到\"</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有找到\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./1.json\"</span><span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./1.json\"</span><span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<h2><a id=\"Promiseajax_46\"></a>Promise解决ajax异步代码</h2> \n<pre><code class=\"prism language-javascript\">   <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> names</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n                $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n                    type<span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n                    dataType<span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n                    url<span class=\"token operator\">:</span> url<span class=\"token punctuation\">,</span>\n                    <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有找到\"</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有找到\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token string\">\"Adawd\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> pro <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./1.json\"</span><span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#xs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n                    &lt;option value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/option&gt;\n                    </span><span class=\"token template-punctuation string\">`</span></span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./1.json\"</span><span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"错误\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#xs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#bj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#ls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#xs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#bj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n                        &lt;option value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Number<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">班级是</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Number<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/option&gt;\n                        </span><span class=\"token template-punctuation string\">`</span></span>\n                        <span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./1.json\"</span><span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#bj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#ls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#bj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#ls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n                        &lt;option value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">.</span>teacher<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">老师叫</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">.</span>teacher<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/option&gt;\n                        </span><span class=\"token template-punctuation string\">`</span></span>\n                        <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '利用Promise来解决ajax异步问题', '2021-06-17 20:40:00', 'ljh', 'Promise简单介绍是ES6为了解决回调地狱的问题出现，其实也没有真正的解决Promise一共分为两个阶段①未决阶段unsettled和已决阶段settled异步事情是从未决到已决阶段，而未决阶段控制着通往已决阶段的能力，能够控制一个事情的走向而ES6又将Promise分为三种状态pedding resolved rejected①等待阶段②已处理阶段，可以按照正常逻辑进行下去③已拒绝阶段，无法按照正常逻辑走下去。后两种都属于已决阶段把状态走向两个已决阶段时可能会传递一些数据①已处理阶段，带出', NULL, NULL);
INSERT INTO `blogs` VALUES (96, '0', 25, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h1><a id=\"_0\"></a>搜索学号、姓名、手机号</h1> \n<h3><a id=\"_1\"></a>–首先，我们来思考一下怎么进行多种数据在一个搜索框里进行搜索，搜索框输入的数据该怎么判断？</h3> \n<h3><a id=\"_2\"></a><em><strong>搜索演示在最后</strong></em></h3> \n<ul><li>学号、姓名、手机号这三个的特点是什么，学号和手机号数据肯定是number类型的，姓名肯定是string，所以进行第一次判断不是number就是string类型第一判断首先判断数据类型再进行学号、姓名、手机号其中一个判断<br> —废话不多说上代码</li></ul> \n<ol><li>获取输入框的<code>value</code>值进行-1用一个变量来接受结果</li><li>再用<code>if(isNaN(num2)</code>判断是否是NaN</li><li>为什么要判断是否是NaN因为string类型数据进行-1是无法减的结果只能是NaN</li><li>这时<code>isNaN</code>肯定会判断为<code>true</code>所以进入姓名搜索里面</li><li>如果获取搜索框的<code>value</code>值可以进行减-1<code>isNaN</code>判断肯定会进入else里面</li></ol> \n<pre><code class=\"prism language-javascript\">            <span class=\"token keyword\">var</span> ipt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>ipt<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    ul<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ipt<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            ul<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"block\"</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">var</span> xh <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]{9}$/</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> phone <span class=\"token operator\">=</span> <span class=\"token regex\">/^[1][3,4,5,7,8]{1}[0-9]{9}$/</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> xh<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">var</span> set1 <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        ul<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ipt<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                ul<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"block\"</span>\n                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        ul<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ipt<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                ul<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"block\"</span>\n                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token punctuation\">}</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<h2><a id=\"_81\"></a>进入姓名之后的搜索</h2> \n<ol><li>获取所有页面上所有的姓名数据存入数组里面，然后把他们的父级也存入一个数组里面也就是页面上一行一行的数据</li><li>姓名的数组下标对应父级数组的下标</li><li>用之前判断进来的<code>value</code>值进行简单的冒泡排序进行比对，比对成功跳出循环直接把当初比对的下标再页面上进行输入其他全部隐藏或者删除</li></ol> \n<pre><code class=\"prism language-javascript\">                <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    ul<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ipt<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            ul<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"block\"</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n</code></pre> \n<h2><a id=\"_104\"></a>进入学号或者手机号的搜索</h2> \n<ol><li>跟之前的姓名搜索一样，就是多一个数组，把学号和手机号的数据还有父级各放一个数组</li><li>也是学号数据的下标对应父级的下标，手机号的下标一样对应父级的下标</li><li>这里会比上面多一个判断，因为每个数据都是多少位，比如我这里的学号数据是数字9位数</li><li>用正则进行第一判断<code>value</code>值是否为9位数字类型的数据，是的话进入学号搜索比对</li><li>如果是手机号，一般手机都是11位数字类型的数据，上面的学号正则判断不成功则会进入手机号的正则判断</li></ol> \n<p>· 学号判断搜索</p> \n<pre><code class=\"prism language-javascript\">                <span class=\"token keyword\">var</span> xh <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]{9}$/</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> xh<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        ul<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ipt<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                ul<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"block\"</span>\n                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n</code></pre> \n<p>· 手机号正则判断搜索</p> \n<pre><code class=\"prism language-javascript\">                     <span class=\"token keyword\">var</span> phone <span class=\"token operator\">=</span> <span class=\"token regex\">/^[1][3,4,5,7,8]{1}[0-9]{9}$/</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">var</span> set1 <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n                     <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        ul<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ipt<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                                ul<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"block\"</span>\n                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token punctuation\">}</span>\n                    \n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210523203002128.gif#pic_center\" alt=\"在这里插入图片描述\"></p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '原生JS写增删改查多种数据搜索框', '2021-05-23 20:30:53', 'ljh', '搜索学号、姓名、手机号–首先，我们来思考一下怎么进行多种数据在一个搜索框里进行搜索，搜索框输入的数据该怎么判断？搜索演示在最后学号、姓名、手机号这三个的特点是什么，学号和手机号数据肯定是number类型的，姓名肯定是string，所以进行第一次判断不是number就是string类型第一判断首先判断数据类型再进行学号、姓名、手机号其中一个判断—废话不多说上代码获取输入框的value值进行-1用一个变量来接受结果再用if(isNaN(num2)判断是否是NaN为什么要判断是否是NaN因为s', NULL, NULL);
INSERT INTO `blogs` VALUES (97, '0', 23, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"path_0\"></a>path模块操作相当于是字符串操作，不会去判断路径是否真实存在</h2> \n<ol><li><code>basename(获取一段路径中最后一个/后面内容,[可选参数：匹配成功去掉内容])</code></li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706182841706.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 2. <code>dirname(__dirname)获取路径目标</code></p> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706183548310.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ol start=\"3\"><li><code>extname()获取路径的后缀名</code></li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'index.js\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706183712261.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 4. <code>join(path1,[./,../],path2)拼接路径，根据操作系统拼接</code></p> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'/index\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'/js\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'/index.js\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706184024789.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 5. <code>resolve()转换成绝对路径，根据CMD命令窗口来拼接</code></p> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'index/html/1.html\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706184450320.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ol start=\"6\"><li><code>normalize()根据操作系统规范路径</code></li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'C://index//css//index.css\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706184719705.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 7. <code>sep操作系统的分隔符</code></p> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\'index\\\\js\\\\123.js\'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706185056703.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h1><a id=\"url_57\"></a>url地址解析</h1> \n<ol><li><code>parse()字符串转换为对象：!!旧版</code></li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706185508642.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> 2. <code>format()对象转换成字符串，就是可以把上方方法转换为对象的数据再次转换为url</code></p> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n    protocol<span class=\"token punctuation\">:</span> <span class=\"token string\">\'https\'</span><span class=\"token punctuation\">,</span>\n    hostname<span class=\"token punctuation\">:</span> <span class=\"token string\">\'www.baidu.com\'</span><span class=\"token punctuation\">,</span>\n    pathname<span class=\"token punctuation\">:</span> <span class=\"token string\">\'/some/path\'</span><span class=\"token punctuation\">,</span>\n    query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{<!-- --></span>\n      page<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      format<span class=\"token punctuation\">:</span> <span class=\"token string\">\'json\'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210706185848476.jpg#pic_center\" alt=\"在这里插入图片描述\"></p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'node.js内置模块path、url', '2021-07-06 18:59:42', 'ljh', 'path模块操作相当于是字符串操作，不会去判断路径是否真实存在basename(获取一段路径中最后一个/后面内容,[可选参数：匹配成功去掉内容])let path = require(\"path\");let obj = path.basename(\"/index.html\");console.log(obj);2.  dirname(__dirname)获取路径目标let path = require(\"path\");console.log(path.dirname(__dirname', NULL, NULL);
INSERT INTO `blogs` VALUES (98, '2', 55, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"bootstrapPC_0\"></a>什么是bootstrap框架是一种响应式框架，也就是可以适应不同大小的屏幕进行比例缩放，也可以做到一套代码适应PC端和移动端。</h2> \n<ol><li><em><strong>—怎么使用这套框架呢可以去<a href=\"https://v4.bootcss.com/docs/layout/overview/\">点击去到bootstrap官方网站</a>预览学习也可以听我细细道来。</strong></em></li><li><em><strong>—bootstrap框架主要是是在class类名的应用上，只要熟练掌握了就没什么问题，bootstrap是通过把屏幕分成12个等分官方性的来说是栅格系统布局。</strong></em></li><li><em><strong>—class主要的布局有 <code>.container</code>类是用于最大盒子布局bootstrap框架给予了该类一个固定宽度，<code>.container-fluid</code>类是用于适用该窗口全屏布局跟当前视口宽度一样的宽度。</strong></em></li><li><em><strong>—上面讲到的<code>.container和.container-fluid</code>是用于最大盒子布局，接下来是栅格布局类，栅格布局类一共有五种分别为<code>.col-xl- .col-lg- .col-md- .col-sm- .col-</code>这五种分别代表什么呢，听我细细道来：1.<code>col-xl- ≥1200px</code>是在屏幕大于等于1200时该盒子占比栅格系统12份中的多少份比如我要一个div在屏幕大于或等于1200px时让它沾满12份就是这样写<code>&lt;div class=\'col-xl-12\'&gt;</code>：2.<code>.col-lg- ≥992px</code>也是如上一样，在屏幕大于或者等于992像素时该元素占比栅格系统的多少份，只要看懂了前面的后面三个都不是问题。</strong></em></li><li><em><strong>—来列举一下这五个分别代表什么屏幕下会响应<code>.col-xl- .col-lg- .col-md- .col-sm- .col-</code>:<code>col-xl- ≥1200px</code>屏幕大于或者等于1200像素，<code>.col-lg- ≥992px</code>屏幕大于或者等于992像素，<code>.col-md- ≥768px</code>屏幕大于或者等于768像素，<code>.col-sm- ≥576px</code>屏幕大于或者等于576像素，<code>.col- &lt;576px</code>是小于576像素时响应，这个时候应该是移动端了。</strong></em></li><li>使用这款框架时需要引入的一些东西</li></ol> \n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1, shrink-to-fit=no<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./bootstrap-4.6.0/dist/css/bootstrap.min.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./jquery-1.11.3.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./bootstrap-4.6.0/dist/js/bootstrap.bundle.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://at.alicdn.com/t/font_2533047_3db4qi97a92.css?spm=a313x.7781069.1998910419.60&amp;file=font_2533047_3db4qi97a92.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://at.alicdn.com/t/font_2533047_3db4qi97a92.css?spm=a313x.7781069.1998910419.63&amp;file=font_2533047_3db4qi97a92.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> \n<h3><a id=\"_22\"></a>讲了这么多来点实例吧</h3> \n<ol><li> <p>任何屏幕大小下都占比12份<code>&lt;div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\" id=\"div\"&gt;</code>不管任何屏幕大小都沾满整个屏幕，你可以按照自己想要当多大屏幕时占比多少设置<br> <img src=\"https://img-blog.csdnimg.cn/20210606204620456.gif#pic_center\" alt=\"在这里插入图片描述\"></p> </li><li> <h3><a id=\"_colxl%09collg__colmd___colsm__col_containerfluidcontaine_26\"></a>注意任何的 <code>.col-xl- .col-lg- .col-md- .col-sm- .col-</code>必须都要包裹在<code>container-fluid或者containe里面</code></h3> </li></ol> \n<pre><code class=\"prism language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container-fluid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>div<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> \n<h1><a id=\"_34\"></a><em>接下来看看我学习这款框架写的一个仿照星巴克官网网页吧~~</em></h1> \n<p><img src=\"https://img-blog.csdnimg.cn/2021060621153967.gif#pic_center\" alt=\"在这里插入图片描述\"></p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '简单易上手的bootstrap框架一看就会', '2021-06-06 21:16:32', 'ljh', '什么是bootstrap框架是一种响应式框架，也就是可以适应不同大小的屏幕进行比例缩放，也可以做到一套代码适应PC端和移动端。—怎么使用这套框架呢可以去点击去到bootstrap官方网站预览学习也可以听我细细道来。—bootstrap框架主要是是在class类名的应用上，只要熟练掌握了就没什么问题，bootstrap是通过把屏幕分成12个等分官方性的来说是栅格系统布局。—class主要的布局有 .container类是用于最大盒子布局bootstrap框架给予了该类一个固定宽度，.container', NULL, NULL);
INSERT INTO `blogs` VALUES (99, '0', 7, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"require_0\"></a>require</h2> \n<ul><li>模块的查找<code>require</code></li></ul> \n<ol><li>绝对路径</li><li>相对路径<br> :1.加<code>./</code>情况，服务端一定要加<code>./</code>表示从当前目录查找<br> :2.不加<code>./</code>情况，1. 检查是否是内置模块 ，2.检查当前目录中的<code>node_modules</code> ，3.检查上级目录中的<code>ode_modules</code></li><li>后缀名<br> ：如果导入时不提供后缀名则自动补全，补全顺序<code>1. js 2. json 3. node 4. mjs</code></li><li>文件名<br> ：如果仅提供目录不提供文件名，则自动寻找该目录下的<code>index.js</code>文件</li><li>运行node ./<br> ：package.json中的main字段，默认值为index.js</li></ol> \n<ul><li>module对象</li></ul> \n<ol start=\"3\"><li><code>exports</code>对象，到处模块中的东西</li><li><code>resolve()</code>拼接路径</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token number\">1.</span>js\n<span class=\"token keyword\">function</span> <span class=\"token function\">abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>abc<span class=\"token operator\">=</span>abc<span class=\"token punctuation\">;</span>\n<span class=\"token number\">2.</span>js\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./1.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">abc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628194551859.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h2><a id=\"os_33\"></a>内置模块<code>os</code></h2> \n<ol><li><code>EOL</code>操作系统的版本，windows的代号为<code>\\r\\n</code>无法在控制台输出，因为会被转义</li><li><code>arch()</code>操作系统CPU体系结构</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> os <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">arch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628195011319.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ol start=\"3\"><li><code>cpus()</code>cpu内核信息</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> os <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">cpus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628195116592.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ol start=\"4\"><li><code>freemen()</code>当前电脑剩余多少内存，返回值为字节</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> os <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">freemem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628195231148.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ol start=\"5\"><li><code>homedir()</code>用户目录</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> os <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">homedir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628195328166.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 6. <code>hostname()</code>主机名</p> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> os <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">hostname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628195417182.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 7. <code>tmpdir()</code>获取临时文件的目录</p> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">const</span> os <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">tmpdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628195508133.jpg#pic_center\" alt=\"在这里插入图片描述\"></p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'node模块化require和内置模块os', '2021-07-01 19:03:57', 'ljh', 'require模块的查找require绝对路径相对路径:1.加./情况，服务端一定要加./表示从当前目录查找:2.不加./情况，1. 检查是否是内置模块 ，2.检查当前目录中的node_modules ，3.检查上级目录中的ode_modules后缀名：如果导入时不提供后缀名则自动补全，补全顺序1. js 2. json 3. node 4. mjs文件名：如果仅提供目录不提供文件名，则自动寻找该目录下的index.js文件运行node ./：package.json中的main   ', NULL, NULL);
INSERT INTO `blogs` VALUES (100, '0', 6, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <p>##首先来看看ES6增加的变量的声明let和const</p> \n<ol><li><code>let</code>声明的变量不会像<code>var</code>声明提前到顶部，<code>let</code>不会造成变量污染因为它不是挂载window上的<code>let</code>不允许重复声明这也跟<code>var</code>不同<code>var</code>重复声明会覆盖之前的值<code>let</code>重复声明只会报错</li><li><code>const</code>声明的变量跟<code>let</code>一样不会被提升到底部，但是跟<code>let</code>不同的时只要声明了就必须赋值且不可改变，也不允许重复声明</li><li><code>let const</code>的到来增加了一个新的作用域，<strong>块级作用域</strong>，以前只有全局作用域和函数作用域现在增加了一个块级作用域</li></ol> \n<pre><code class=\"prism language-javascript\">        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//let声明变量不会提前</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210615193930718.jpg#pic_center\" alt=\"在这里我我瓦达插入图片描述\"></p> \n<pre><code class=\"prism language-javascript\">        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//const声明变量不会提前</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210615194140270.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> a <span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//const未赋值</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210615194307962.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<pre><code class=\"prism language-javascript\">        <span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<ul><li>每一个<code>{}</code>都是一个块级作用域，上面在第二块级作用域里面声明一个<code>let a = 10</code>第一个里面无法访问到所以会报错，但是如果在第一个里面声明第二可以访问到，是因为第二块级作用域在第一个的作用域里面<br> <img src=\"https://img-blog.csdnimg.cn/20210615194609495.jpg#pic_center\" alt=\"在这里插入图片描述\"></li></ul> \n<h2><a id=\"ES6___35\"></a>ES6增加的字符串模板<code>``</code>点点</h2> \n<ol><li>以前的字符串拼接都是+拼接，现在有<code>``</code>了就很方便，可以拼接变量和表达式，新增的模板使用<code>${}</code>进行拼接，在大括号里面需要拼接的变量</li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".div1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">    \n        &lt;ul&gt;\n        &lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;\n        &lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;\n        &lt;li&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${<!-- --></span>c<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/li&gt;\n        &lt;/ul&gt;\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210615195442747.jpg#pic_center\" alt=\"在这里插入图片描述\"></p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '超简单ES6新增的let、const声明和字符串模板', '2021-06-15 19:55:41', 'ljh', '##首先来看看ES6增加的变量的声明let和constlet声明的变量不会像var声明提前到顶部，let不会造成变量污染因为它不是挂载window上的let不允许重复声明这也跟var不同var重复声明会覆盖之前的值let重复声明只会报错const声明的变量跟let一样不会被提升到底部，但是跟let不同的时只要声明了就必须赋值且不可改变，也不允许重复声明let const的到来增加了一个新的作用域，块级作用域，以前只有全局作用域和函数作用域现在增加了一个块级作用域        console.l  ', NULL, NULL);
INSERT INTO `blogs` VALUES (101, '0', 10, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h1><a id=\"_0\"></a>改</h1> \n<ul><li>什么是改，点击修改的时候需要修改当前学生的所有信息</li></ul> \n<ol><li>通过两个函数封装修改功能</li><li>第一个：通过传入进来的config接受this参数，进行循环添加进行把所有li添加进arr数组，然后通过for in 循环把所有li的文本赋值给所有input.value，这样点击修改后弹出修改页面会呈现所有的值</li><li>第二个：是用来修改之后的值赋值给当前点击修改这一行的所有li</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">//第一个函数</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">fms</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> ipt1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>config<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    ipt1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML\n                    <span class=\"token comment\">// console.log(arr[key].innerHTML);</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//第二个函数</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">fun6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">var</span> arrli <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>childNodes\n                <span class=\"token keyword\">var</span> ipt0 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> ipt1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> ipt2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> ipt3 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> ipt4 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> ipt5 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> ipt6 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> ipt7 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arrli<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ipt0<span class=\"token punctuation\">.</span>value\n                arrli<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ipt1<span class=\"token punctuation\">.</span>value\n                arrli<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ipt2<span class=\"token punctuation\">.</span>value\n                arrli<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ipt3<span class=\"token punctuation\">.</span>value\n                arrli<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ipt4<span class=\"token punctuation\">.</span>value\n                arrli<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ipt5<span class=\"token punctuation\">.</span>value\n                arrli<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ipt6<span class=\"token punctuation\">.</span>value\n                arrli<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ipt7<span class=\"token punctuation\">.</span>value\n\n            <span class=\"token punctuation\">}</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210516193257414.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h1><a id=\"_47\"></a>查</h1> \n<ul><li>什么是查找就是，在查找框里面输入用户名字显示该用户</li></ul> \n<ol><li>定义该搜索框只能搜索一项比如名字，学号，手机号，地址等等</li><li>我定义了名字，所以把所有的名字放进一个数组和搜索框的值进行循环比对，也把所有的ul获取了，ul也是一个伪数组</li><li>使用冒泡排序进行比对，如果搜索框的值跟arr数组里面其中一个比对成功了就把，ul里面的i值显示，其他都diplay：none，因为arr数组下标跟ul伪数组下标对应，然后退出循环即可</li></ol> \n<pre><code class=\"prism language-javascript\">   <span class=\"token comment\">// 搜素</span>\n            <span class=\"token keyword\">function</span> <span class=\"token function\">ss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">var</span> ipt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                ipt<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ul1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ipt<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>ul<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                                    ul<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display<span class=\"token operator\">=</span><span class=\"token string\">\"none\"</span>\n                                <span class=\"token punctuation\">}</span>\n                                ul<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display<span class=\"token operator\">=</span><span class=\"token string\">\"block\"</span>\n                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">ss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210516194354463.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h2><a id=\"_80\"></a>基础增删改查到这里就写完了</h2>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '2-原生JS写增删改查', '2021-05-16 19:44:52', 'ljh', '正则表达式匹配、手机号、QQ号、邮箱号第一个正则表达式匹配手机号```首先我们来创建一个变量接受用户输入的数据var son = number(prompt(\"\"))然后再来一个变量接受正则匹配var son1 = /^[1][3,4,5,7,8]{2}[0-9]{8}$/;console.log(son1.test(son1))这一组数据就是用来匹配用户输入手机号是否为正确首先一步一步来解读这句正则是什么意思/^[1][3,4,5,7,8][0-9]{9}$/两个//在里面', NULL, NULL);
INSERT INTO `blogs` VALUES (102, '0', 39, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"globalJSwindowthisWindownodethisglobal_0\"></a>global跟JS在浏览器端运行时的全局对象window一样，但是不一样的是浏览器全局中this指向的是Window而node中this不是指向global的，是指向空对象</h2> \n<ol><li><code>console</code>命令行输出，浏览器端已经见多不怪了<br> 1 -1 . <code>log() ：console.log(123)</code><img src=\"https://img-blog.csdnimg.cn/20210628184310885.jpg#pic_center\" alt=\"在这里插入图片描述\">1 -2 .<code>dir()</code><br> 1 -3 .<code>time()</code><br> 1 -4 .<code>timeEnd()</code><br> 1 -5 .<code>assert()</code>:断言，node.js中多用作测试代码是否被修改</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"已被修改\"</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628184707709.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 1 -6. <code>table()</code><br> 2. <code>setTimeOut()*,setInterval()*</code>跟浏览器完全相同，但是浏览器返回的是ID，node返回的是对象<br> 3. node增加的定时器<code>setImmediate()*</code>类似于浏览器端的<code>setTimeOut()0</code>一样<br> 4. <code>__dirname*</code>获取当前模块所在的目录</p> \n<pre><code class=\"prism language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628185115844.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 5. <code>__filename*</code>获取当前模块文件路径</p> \n<pre><code class=\"prism language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>__filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628185231867.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 6. <code>Buffer</code>类型化数组，继承Uint8Array计算机储存的基本单位：字节，使用时输出时肯能需要用16进制表示<br> <img src=\"https://img-blog.csdnimg.cn/20210628185453685.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> 7. <code>process</code>进程<br> 7. -1<code>cwd()</code>返回当前node.js进程运行目录只要是输入到日志里面</p> \n<pre><code class=\"prism language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628185711743.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 8. -2<code>exit()</code>强制退出当前node进程</p> \n<pre><code class=\"prism language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//node进程已被强制退出无法输出</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/2021062818585914.jpg#pic_center\" alt=\"在这里插入图片描述\">8. -3<code>argv</code>获取命令中的所有参赛是一个数组</p> \n<pre><code class=\"prism language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628190046587.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 8. -4<code>platform</code>获取当前平台系统</p> \n<pre><code class=\"prism language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628190826920.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 9. -5<code>kill(pid)</code>根据进程的pid杀死进程<br> 9. -5<code>env</code>获取环境变量对象</p> \n<pre><code class=\"prism language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210628191026348.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'node.js全局对象', '2021-06-30 20:15:36', 'ljh', 'global跟JS在浏览器端运行时的全局对象window一样，但是不一样的是浏览器全局中this指向的是Window而node中this不是指向global的，是指向空对象console命令行输出，浏览器端已经见多不怪了1 -1 . log() ：console.log(123)1 -2 .dir()1 -3 .time()1 -4 .timeEnd()1 -5 .assert():断言，node.js中多用作测试代码是否被修改let a = 10;a = 123;console.ass', NULL, NULL);
INSERT INTO `blogs` VALUES (103, '0', 4, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_0\"></a>解构赋值</h2> \n<ol><li>解构赋值就是<code>=</code>号两边的结构相等即可赋值</li><li>更方便的进行赋值运算，也是对赋值符号的扩展，能够更有效率的开发减少代码的书写量</li><li>可以对数组和对象进行解构赋值，新增<code>...</code>.三点运算符可以把几个值收为一个数组，也可以把一个数组进行展开，！！注意三点运算符收集函数参数时只能对最后剩余的参数收集</li></ol> \n<h4><a id=\"_4\"></a>解构赋值案列：</h4> \n<ol><li></li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<ul><li>输出为1,2,3,4,5，对数组赋值</li></ul> \n<ol start=\"2\"><li></li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>name<span class=\"token operator\">:</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">:</span><span class=\"token string\">\'qwe\'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">0</span><span class=\"token operator\">:</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token operator\">:</span>c<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{<!-- --></span>name<span class=\"token operator\">:</span>ooo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>name<span class=\"token operator\">:</span>oName<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<ul><li>输出为1,2,3和jack，对数组可以解构赋值也能对对象进行赋值</li></ul> \n<h2><a id=\"_24\"></a>三点<code>...</code>运算符案例</h2> \n<ol><li></li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<ul><li>输出数组<code>[1, 2, 3, 4, 5]</code>,可以对函数参数进行收集</li></ul> \n<ol start=\"2\"><li></li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>arg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<ul><li>输出为<code>(2) [4, 5],1 2 3</code>前面有三个接受三点运算符就只能对剩余参数进行接受返回数组</li></ul> \n<ol start=\"3\"><li></li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token operator\">=</span><span class=\"token string\">\"qwe\"</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">]</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<ul><li>展开结果为<code>qwe abc 123</code>;ES6主要是对数组展开，ES7是对象展开</li></ul> \n<h2><a id=\"ES6_53\"></a>ES6迭代器</h2> \n<ol><li>从一个数据集合中按照顺序，不断的取出数据，不断取出数据所以叫做迭代</li><li>迭代其实和遍历数据差不多，遍历数据之不过是用for循环进行遍历数据，一次性全部取出数据，迭代是调用一次取出一次数据</li><li>封装，数据形式是数组或者对象</li><li>封装迭代器的条件是满足两项 ①迭代器必须要有得到下一个数据的能力②判断后面是否有数据</li></ol> \n<h3><a id=\"_58\"></a>利用迭代器封装一个获取斐波那锲数列的函数</h3> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">let</span> one <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> two <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token function\">por</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">let</span> value<span class=\"token punctuation\">;</span>\n                    value <span class=\"token operator\">=</span> one <span class=\"token operator\">+</span> two <span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">let</span> rej <span class=\"token operator\">=</span> <span class=\"token punctuation\">{<!-- --></span>\n                        value<span class=\"token punctuation\">,</span>\n                        done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n                    <span class=\"token punctuation\">}</span>\n                    one <span class=\"token operator\">=</span> two <span class=\"token punctuation\">;</span>\n                    two <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                    n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> rej<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">por</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '一看就会的ES6解构赋值、迭代器', '2021-06-17 20:13:26', 'ljh', '解构赋值解构赋值就是=号两边的结构相等即可赋值更方便的进行赋值运算，也是对赋值符号的扩展，能够更有效率的开发减少代码的书写量可以对数组和对象进行解构赋值，新增....三点运算符可以把几个值收为一个数组，也可以把一个数组进行展开，！！注意三点运算符收集函数参数时只能对最后剩余的参数收集解构赋值案列：        const arr = [1,2,3,4,5];        const [a,b,c,d,e] = arr;        console.log(a,b,c,d,e);', NULL, NULL);
INSERT INTO `blogs` VALUES (104, '0', 15, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_0\"></a>分页</h2> \n<h3><a id=\"_1\"></a>演示在最后</h3> \n<ol><li>首先怎么实现数据的分页</li><li>确定每一页的数据量就行了，是不是超简单</li><li>比如我们本地的所有的数据一共有40条</li><li>所以每一页定的数据量是10条，一共就有4页</li><li><img src=\"https://img-blog.csdnimg.cn/20210523204706747.jpg#pic_center\" alt=\"在这里插入图片描述\"></li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".ind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".fnmid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">\"display\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"none\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> tex <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> num<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> num <span class=\"token operator\">*</span> tex<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token function\">renderdatatwo</span><span class=\"token punctuation\">(</span>dataAdmin<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<ol start=\"6\"><li>我们来确定一个公式，<code>num</code>定义的是10因为第一次页面自动渲染的数据是1-10条的数据</li><li><code>var tex = $(this).text()</code>是当前点击的页面，比如我点击第一页那这个元素的<code>text()</code>就是1</li><li><code>for (var j = (tex - 1) * num; j &lt; num * tex; j++)</code>这就是循环公式，j小于的就是当前页数乘以10</li><li><code>renderdatatwo(dataAdmin[j], j)</code>循环调用这个函数，因为这个是页面渲染数据方法，传入<code>dataAdmin[j]</code>是本地数据里面的每一项<code>j</code>也就是<code>j = (tex - 1) * num</code>是控制页面渲染数据里面的循环渲染多少条到多少条数据</li><li>然后给所有的页面进行添加点击事件，进行触发该循环，传入数据给页面渲染函数</li></ol> \n<h2><a id=\"_25\"></a>—页面渲染数据函数方法</h2> \n<pre><code class=\"prism language-javascript\"><span class=\"token comment\">// 页面数据渲染</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">renderdatatwo</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token keyword\">var</span> one1 <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".templateul2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"templateul2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    one1<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token string\">\"display\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"block\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n        one1<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        one1<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span>\n            <span class=\"token template-string\"><span class=\"token string\">`\n                    &lt;input type=\"checkbox\" class=\"chk\"&gt;\n                    `</span></span>\n        <span class=\"token punctuation\">)</span>\n        one1<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span>\n            <span class=\"token template-string\"><span class=\"token string\">`\n                    &lt;span class=\"sp1\"&gt;修改&lt;/span&gt;\n                    &lt;span class=\"sp2\"&gt;删除&lt;/span&gt;\n                    `</span></span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".fnmid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>one1<span class=\"token punctuation\">)</span>\n        num<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">renderdatatwo</span><span class=\"token punctuation\">(</span>dataAdmin<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n<ol start=\"11\"><li>上面传入的<code>j</code>在这里接收也用<code>j</code>进行接收</li><li>每点击一次传入的<code>j</code>数据都不同然后进行渲染不同的数据</li><li>但是渲染前都会进行之前的数据隐藏或者删除<code>$(\".fnmid\").children().css({\"display\": \"none\" })</code></li><li>渲染数据的函数另一个接收的参数是本地的数据</li><li>用<code>for in</code>循环进行渲染数据，都是用的<code>jquery</code>方法</li></ol> \n<h2><a id=\"_63\"></a>演示</h2> \n<p><img src=\"https://img-blog.csdnimg.cn/20210523210208750.gif#pic_center\" alt=\"在这里插入图片描述\"></p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '超简单的jquery版的分页一看就会', '2021-05-23 22:54:55', 'ljh', '分页演示在最后首先怎么实现数据的分页确定每一页的数据量就行了，是不是超简单比如我们本地的所有的数据一共有40条所以每一页定的数据量是10条，一共就有4页$(\".ind\").click(function () {    $(\".fnmid\").children().css({        \"display\": \"none\"    })    var num = 10;    var tex = $(this).text()    for (var j = (tex - 1) *', NULL, NULL);
INSERT INTO `blogs` VALUES (105, '0', 5, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"H5inputrange_0\"></a>调色器怎么实现的，非常非常的简单就是使用H5input新属性range拖动条</h2> \n<pre><code class=\"prism language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>255<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210607195732258.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210607200046843.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ul><li>通过设置input新属性<code>range</code>实现拖动条，同时可以设置最大值和最小值<code>min=\"0\" max=\"255\"</code>因为颜色是0-255所以设置最大255，最小0，实现颜色切换，一共有三组所以需要设置三个拖动条来实现颜色切换，通过以下<code>js</code>代码和<code>html</code>代码实现，非常的简单</li><li>最主要的是通过三个拖动条的<code>value</code>值来实时设置颜色</li></ul> \n<pre><code class=\"prism language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>div1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>255<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ip1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>255<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ip2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>255<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ip3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> \n<pre><code class=\"prism language-javascript\">   <span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ip1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        num1 <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">bgcolor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ip2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        num2 <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">bgcolor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ip3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        num3 <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">bgcolor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">bgcolor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n       document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">\"rgb(\"</span> <span class=\"token operator\">+</span> num1 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num2 <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> num3 <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210607201048769.gif#pic_center\" alt=\"在这里插入图片描述\"></p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '超简单的H5input新属性调色器', '2021-06-07 20:11:50', 'ljh', '调色器怎么实现的，非常非常的简单就是使用H5input新属性range拖动条    <input type=\"range\" min=\"0\" max=\"255\">通过设置input新属性range实现拖动条，同时可以设置最大值和最小值min=\"0\" max=\"255\"因为颜色是0-255所以设置最大255，最小0，实现颜色切换，一共有三组所以需要设置三个拖动条来实现颜色切换，通过以下js代码和html代码实现，非常的简单最主要的是通过三个拖动条的value值来实时设置颜色    ', NULL, NULL);
INSERT INTO `blogs` VALUES (106, '0', 19, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"Set_0\"></a>Set集合：是一种数据的存储结构，适用于不同的场景储存不同的数据</h2> \n<ul><li>主要的功能是存储不重复的数据</li><li><code>set</code>是通过<code>let a = new Set()</code>出来</li><li>介绍一下<code>set</code>集合的几个实例方法</li></ul> \n<ol><li><code>add()</code>添加</li><li><code>has()</code>判断此数据是否在集合里面存在</li><li><code>delete()</code>删除该数据</li><li><code>size</code>该属性只读不能更改的</li></ol> \n<h3><a id=\"_11\"></a>案例：</h3> \n<ol><li></li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//自动去重</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//重复无法添加</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//可以添加</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210622184913173.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ol start=\"2\"><li></li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//已存在返回true</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//不存在fasle</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210622185133559.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ol start=\"3\"><li></li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210622185236976.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 4.</p> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210622185441430.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h1><a id=\"set_49\"></a>封装set集合源码</h1> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MySet</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>iter  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> iter<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`你数据不是一个可迭代对象`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">has</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> items <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isE</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">isE</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>one <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> two <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">.</span>length\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ite <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>ite<span class=\"token punctuation\">,</span>ite<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">delet</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isE</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//迭代</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ite <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">yield</span> ite<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '看看就会的ES6Set集合和封装源码', '2021-06-22 18:59:28', 'ljh', 'Set集合：是一种数据的存储结构，适用于不同的场景储存不同的数据主要的功能是存储不重复的数据set是通过let a = new Set()出来介绍一下set集合的几个实例方法add()添加has()判断此数据是否在集合里面存在delete()删除该数据size该属性只读不能更改的案例：        let arr = new Set([1,2,3,4,5,6,4,5,6])//自动去重        arr.add(1)//重复无法添加        arr.add(1', NULL, NULL);
INSERT INTO `blogs` VALUES (107, '0', 7, '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"MapSetMap_0\"></a>Map集合：和Set集合不同的是存储方法，Map是以键值对的方式进行存取，键名不重复，重复则覆盖上一个</h2> \n<ul><li><code>let a = new Map()</code></li><li>以二维数组的方法进行存取</li><li>二维数组中只能存在两位<code>[[\'a\',1]]</code>再多一位无效</li><li>实例方法</li></ul> \n<ol><li><code>set()</code>添加</li><li><code>get()</code>取值</li><li><code>has()</code>判断数据是否存在</li><li><code>delete()</code>删除数据</li><li><code>clear()</code>清空数据</li><li><code>size</code>只读不能改</li></ol> \n<h2><a id=\"_12\"></a>案例：</h2> \n<ol><li></li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210622194136124.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ol start=\"2\"><li></li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210622194252430.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 3.</p> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210622194349378.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 4.</p> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210622194458897.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 5.</p> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210622194600873.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 6.</p> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210622194740203.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h1><a id=\"Map_112\"></a>Map源码封装</h1> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyMap</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>ite <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> ite<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">throw</span> <span class=\"token function\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`数据不可迭代`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> iter <span class=\"token keyword\">of</span> ite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> iter<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">throw</span> <span class=\"token function\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`数据不可迭代`</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">const</span> iters <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> iters<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> iters<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{<!-- --></span>\n                value<span class=\"token punctuation\">,</span>\n                keys\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> undefined\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">has</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> undefined <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> iter <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>iter<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isE</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">,</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token function\">getObj</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> iter <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">isE</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> iter\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">isE</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>one <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> two <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span>two<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_datas<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '看看就会的ES6Map集合和源码封装', '2021-06-22 19:49:52', 'ljh', 'Map集合：和Set集合不同的是存储方法，Map是以键值对的方式进行存取，键名不重复，重复则覆盖上一个let a = new Map()以二维数组的方法进行存取二维数组中只能存在两位[[\'a\',1]]再多一位无效实例方法set()添加get()取值has()判断数据是否存在delete()删除数据clear()清空数据size只读不能改案例：        let a = new Map(            [                [\"A\",1], ', NULL, NULL);
INSERT INTO `blogs` VALUES (108, 'wadawd', 12312, 'awdwadawdwadawdawd', 'awdwadawd', 'awdaw', 'wadawd', 'awdawdawd', '2021-07-22 02:20:39', NULL);
INSERT INTO `blogs` VALUES (109, '0', 0, '# 啊\n- 我\n- 你\n- 一一一一', '# 啊\n- 我\n- 你\n- 一一一一', '2021/7/22下午7:59:45', 'ljh', '# 啊\n- 我\n- 你\n- 一一一一', '2021-07-22 12:04:02', NULL);
INSERT INTO `blogs` VALUES (110, '0', 0, '<h1 id=\"\">啊啊啊啊阿达哇打我的若干人通过让它发光任天堂</h1>', '<h1 id=\"\">啊啊啊啊阿达哇打我的若干人通过让它发光任天堂</h1>', '2021/7/22下午8:01:11', 'ljh', '<h1 id=\"\">啊啊啊啊阿达哇打我的若干人通过让它发光任天堂</h1>', '2021-07-22 12:02:26', NULL);
INSERT INTO `blogs` VALUES (111, '0', 0, '<p>qwdqwdqweqeqwe</p>', '<p>qwdqwdqweqeqwe</p>', '2021/7/22下午8:47:40', 'ljh', '<p>qwdqwdqweqeqwe</p>', NULL, NULL);

-- ----------------------------
-- Table structure for blogstwos
-- ----------------------------
DROP TABLE IF EXISTS `blogstwos`;
CREATE TABLE `blogstwos`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `like` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `Reading` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `Blogcontent` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `Blogtitle` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `releaseTime` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `Author` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `BlogIntroduction` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `deletedAt` datetime NULL DEFAULT NULL,
  `Grammar` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blogstwos
-- ----------------------------
INSERT INTO `blogstwos` VALUES (1, '55', '63', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <p>今天来教教大家怎么使用CSS中的选择器</p> \n<p>#CSS中的四种基本选择器</p> \n<h2><a id=\"_5\"></a>标签选择器</h2> \n<p>使用在直接写上标签{样式}<br> 这个选择器是将本页所有的这个类型标签更改<br> 比如div{<!-- --><br> border: 1px solid red;<br> width: 100px;<br> height: 100px;<br> }<br> <img src=\"https://img-blog.csdnimg.cn/20210310224139117.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p><img src=\"https://img-blog.csdnimg.cn/20210310224150519.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h2><a id=\"ID_18\"></a>ID选择器</h2> \n<p>1.给标签加上一个ID属性并设置上ID名<br> 使用方式用#加上ID名<br> 比如 #id1{<!-- --><br> border: 1px solid blue;<br> width: 200px;<br> height: 200px;<br> }<img src=\"https://img-blog.csdnimg.cn/20210310224732914.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210310224741277.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h2><a id=\"_28\"></a>类选择器</h2> \n<p>使用方法给标签加上class属性并设置上类名.类名{}<br> 比如 .div1{<!-- --><br> width: 200px;<br> height: 200px;<br> border: 1px solid pink;<br> margin: 0 auto;<br> }<br> <img src=\"https://img-blog.csdnimg.cn/20210310225228803.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210310225238441.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h2><a id=\"_40\"></a>通配符选择器</h2> \n<p>使用方法是*{}选择所有的标签进行更改<br> 注意会选择所有标签！<br> 比如 *{<!-- --><br> width: 100px;<br> height: 100px;<br> background-color: powderblue;<br> }<br> 这里通配符选择器选择了所有标签所以会变成全屏背景颜色<br> <img src=\"https://img-blog.csdnimg.cn/20210310225736589.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210310225744727.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p>##这四个选择器的优先级<br> ID选择器&gt;类选择器&gt;标签选择器&gt;通配符选择器</p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '菜鸡教学~~', '2021-03-10 23:03:52', 'ljh', '今天来教教大家怎么使用CSS中的选择器#CSS中的四种基本选择器标签选择器使用在直接写上标签{样式}这个选择器是将本页所有的这个类型标签更改比如div{border: 1px solid red;width: 100px;height: 100px;}ID选择器1.给标签加上一个ID属性并设置上ID名使用方式用#加上ID名比如 #id1{border: 1px solid blue;width: 200px;height: 200px;}类选择器使用方法给标签加上', NULL, NULL);
INSERT INTO `blogstwos` VALUES (2, '4', '18', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_0\"></a>轮播图</h2> \n<h3><a id=\"js_1\"></a>上期我们讲到了运动框架，这期就用封装的运动框架来写轮播图，js封装的运动框架引用代码放在文末自取</h3> \n<h2><a id=\"1__4\"></a>1. 首先来写基本的样式</h2> \n<ul><li>css样式</li></ul> \n<pre><code class=\"prism language-javascript\">  <span class=\"token operator\">*</span><span class=\"token punctuation\">{<!-- --></span>\n            margin<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            padding<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token operator\">-</span>style<span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>father<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>px<span class=\"token punctuation\">;</span>\n            position<span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* overflow: hidden; */</span>\n            margin<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px auto<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>father ul<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">2500</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>px<span class=\"token punctuation\">;</span>\n            position<span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n            left<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            top<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>father ul li<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>px<span class=\"token punctuation\">;</span>\n            float<span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>father ul li img<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>father <span class=\"token punctuation\">.</span>btn<span class=\"token punctuation\">{<!-- --></span>\n            position<span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n            top<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n            margin<span class=\"token operator\">-</span>top<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">20</span>px<span class=\"token punctuation\">;</span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">40</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">40</span>px<span class=\"token punctuation\">;</span>\n            color<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n            background<span class=\"token operator\">-</span>color<span class=\"token punctuation\">:</span> #<span class=\"token number\">000</span><span class=\"token punctuation\">;</span>\n            line<span class=\"token operator\">-</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">40</span>px<span class=\"token punctuation\">;</span>\n            text<span class=\"token operator\">-</span>align<span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n            opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>leftbtn<span class=\"token punctuation\">{<!-- --></span>\n            left<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>rightbtn<span class=\"token punctuation\">{<!-- --></span>\n            right<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>father <span class=\"token punctuation\">.</span>son<span class=\"token punctuation\">{<!-- --></span>\n            position<span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n            bottom<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n            text<span class=\"token operator\">-</span>align<span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>father <span class=\"token punctuation\">.</span>son span<span class=\"token punctuation\">{<!-- --></span>\n            display<span class=\"token punctuation\">:</span> inline<span class=\"token operator\">-</span>block<span class=\"token punctuation\">;</span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n            border<span class=\"token operator\">-</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n            background<span class=\"token operator\">-</span>color<span class=\"token punctuation\">:</span> #ccc<span class=\"token punctuation\">;</span>\n            margin<span class=\"token operator\">-</span>right<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>father <span class=\"token punctuation\">.</span>son <span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">{<!-- --></span>\n            background<span class=\"token operator\">-</span>color<span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>btn<span class=\"token punctuation\">:</span>hover<span class=\"token punctuation\">{<!-- --></span>\n            opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<ul><li>html代码</li></ul> \n<pre><code class=\"prism language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ulone<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./f1.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./f2.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./f3.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./f4.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./f1.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn leftbtn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token entity\" title=\"<\">&amp;lt;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn rightbtn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token entity\" title=\">\">&amp;gt;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>son<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>active<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> \n<p>—逻辑：<br> ①首先让图片成为一排 浮动起来</p> \n<pre><code class=\"prism language-javascript\"><span class=\"token punctuation\">.</span>father ul li<span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//width: 500px;</span>\n            <span class=\"token comment\">//height: 300px;</span>\n            float<span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210421195800328.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p>②让那个元素移动起来呢，是ul还是li肯定是ul，怎么让元素移动起来肯定是要用到定位</p> \n<pre><code class=\"prism language-javascript\"> <span class=\"token punctuation\">.</span>father ul<span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token comment\">//width: 2500px;</span>\n            <span class=\"token comment\">//height: 300px;</span>\n            position<span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n            left<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//后期用于js获取style样式</span>\n            top<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//后期用于js获取style样式</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<p>③可以让元素移动了，哪改变ul什么值可以让图片移动起来，当然是left值，所以上面样式里面写left0就很有必要了</p> \n<pre><code class=\"prism language-javascript\"> left<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//后期用于js获取style样式</span>\n</code></pre> \n<h2><a id=\"2_js_128\"></a>2. js代码包括了左右按钮和底部小圆点</h2> \n<pre><code class=\"prism language-javascript\">  <span class=\"token keyword\">var</span> indexX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> spaN <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 开关门思想</span>\n        <span class=\"token keyword\">var</span> bol <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> timer<span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取ul</span>\n        <span class=\"token keyword\">var</span> ulone <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ulone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取每次移动的距离</span>\n        <span class=\"token keyword\">var</span> RunUl <span class=\"token operator\">=</span> ulone<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 计算移动的图片长度 4 </span>\n        <span class=\"token keyword\">var</span> wid <span class=\"token operator\">=</span> ulone<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取左右按钮</span>\n        <span class=\"token keyword\">var</span> leftbtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"leftbtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> rightbtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rightbtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 给左右按钮绑定点击事件</span>\n        leftbtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">Runimg</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        rightbtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">Runimg</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"下\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 自动轮播函数</span>\n         timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>Runimg<span class=\"token punctuation\">,</span><span class=\"token number\">2500</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">function</span> <span class=\"token function\">Runimg</span><span class=\"token punctuation\">(</span>fangxiang<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                 bol <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fangxiang <span class=\"token operator\">||</span> fangxiang <span class=\"token operator\">==</span> <span class=\"token string\">\"下\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    indexX<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token function\">startMove</span><span class=\"token punctuation\">(</span>ulone<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>left<span class=\"token punctuation\">:</span>ulone<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">-</span> RunUl<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ulone<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">==</span> <span class=\"token operator\">-</span> wid<span class=\"token operator\">*</span>RunUl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                            ulone<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token string\">\"0px\"</span><span class=\"token punctuation\">;</span>\n                            indexX<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                         <span class=\"token punctuation\">}</span>\n                         timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>Runimg<span class=\"token punctuation\">,</span><span class=\"token number\">2500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                         bol<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                         <span class=\"token function\">goshift</span><span class=\"token punctuation\">(</span>indexX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fangxiang <span class=\"token operator\">==</span> <span class=\"token string\">\"前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ulone<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                         ulone<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> wid<span class=\"token operator\">*</span>RunUl<span class=\"token operator\">+</span><span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n                         indexX<span class=\"token operator\">=</span> wid<span class=\"token punctuation\">;</span>\n                     <span class=\"token punctuation\">}</span>\n                     indexX<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token function\">startMove</span><span class=\"token punctuation\">(</span>ulone<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>left<span class=\"token punctuation\">:</span>ulone<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token operator\">+</span>RunUl<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                         timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>Runimg<span class=\"token punctuation\">,</span><span class=\"token number\">2500</span><span class=\"token punctuation\">)</span>\n                         bol <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">goshift</span><span class=\"token punctuation\">(</span>indexX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">}</span>\n             <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span>\n         <span class=\"token keyword\">function</span> <span class=\"token function\">goshift</span><span class=\"token punctuation\">(</span>index1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n             <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>spaN<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                 spaN<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>className<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n             spaN<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>className<span class=\"token operator\">=</span><span class=\"token string\">\"active\"</span>\n         <span class=\"token punctuation\">}</span>\n         <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>spaN<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n             <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>index2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                 spaN<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                     bol <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token function\">startMove</span><span class=\"token punctuation\">(</span>ulone<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{<!-- --></span>left<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>index2<span class=\"token operator\">*</span>RunUl<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                         bol<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                         timer<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>Runimg<span class=\"token punctuation\">,</span><span class=\"token number\">2500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                         <span class=\"token function\">goshift</span><span class=\"token punctuation\">(</span>index2<span class=\"token punctuation\">)</span>\n                     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">}</span>\n             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">}</span>\n</code></pre> \n<h3><a id=\"js_202\"></a>—js这期讲自动轮播的代码逻辑：</h3> \n<p>①实际上的轮播图是五张图片第一张和最后一张是同一张图片，这里所以长度要减一</p> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> wid <span class=\"token operator\">=</span> ulone<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210422214727432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p>②然后移动一次的距离要叠加上一次移动的距离是实时获取“offsetWidth”</p> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> RunUl <span class=\"token operator\">=</span> ulone<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">;</span>\n</code></pre> \n<p>③设置定时器多少秒执行一次函数代码</p> \n<ul><li>1000=1秒 这里设置2500就是2.5秒执行一次</li></ul> \n<pre><code class=\"prism language-javascript\"> timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>Runimg<span class=\"token punctuation\">,</span><span class=\"token number\">2500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p>④整个自动播放的核心就是每多少秒自动叠加一次移动距离</p> \n<pre><code class=\"prism language-javascript\">ulone<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> wid<span class=\"token operator\">*</span>RunUl<span class=\"token operator\">+</span><span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p>⑤轮播到最后一张图片时重新把ulone.style.left赋值为0因为最后一张和第一张是一样的图片用户感觉不到图片的切换</p> \n<pre><code class=\"prism language-javascript\">ulone<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token string\">\"0px\"</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<h2><a id=\"_231\"></a>轮播图自动轮播部分结构图</h2> \n<p><img src=\"https://img-blog.csdnimg.cn/20210422215209730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h2><a id=\"_235\"></a>效果图</h2> \n<ul><li>未溢出隐藏效果</li></ul> \n<p><img src=\"https://img-blog.csdnimg.cn/20210422214049407.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ul><li>溢出隐藏效果<br> <img src=\"https://img-blog.csdnimg.cn/20210422214255606.gif#pic_center\" alt=\"在这里插入图片描述\"></li></ul> \n<h2><a id=\"__243\"></a>- 自动轮播的效果就基本完成!!</h2> \n<p>—封装的运动框架</p> \n<ul><li>外部js文件直接引入</li></ul> \n<pre><code class=\"prism language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">startMove</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> attrObj<span class=\"token punctuation\">,</span>callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> <span class=\"token comment\">// 传入一个元素，我让元素运动城你想要的的目标</span>\n            <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> iSpeed <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n                iCur <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            dom<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">var</span> bStop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> attr <span class=\"token keyword\">in</span> attrObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span> \n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attr <span class=\"token operator\">==</span> <span class=\"token string\">\"opacity\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        iCur <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token function\">getStyle</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                        iCur <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token function\">getStyle</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                    iSpeed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>attrObj<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> iCur<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n                    iSpeed <span class=\"token operator\">=</span> iSpeed <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>iSpeed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>iSpeed<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attr <span class=\"token operator\">==</span> <span class=\"token string\">\"opacity\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\n                        dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>iCur <span class=\"token operator\">+</span> iSpeed<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">100</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{<!-- --></span>\n                        dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iCur <span class=\"token operator\">+</span> iSpeed <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iCur <span class=\"token operator\">!=</span> attrObj<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        bStop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">==</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">getStyle</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>getComputedStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">return</span> dom<span class=\"token punctuation\">.</span>currentStyle<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<h2><a id=\"_285\"></a>这期讲完了，讲得好乱！见谅！</h2>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '用运动框架写轮播图', '2021-04-22 21:53:23', 'ljh', '轮播图上期我们讲到了运动框架，这期就用封装的运动框架来写轮播图，js封装的运动框架引用代码放在文末自取1. 首先来写基本的样式css样式  *{            margin: 0;            padding: 0;            list-style: none;        }        .father{            width: 500px;            height: 300px;            position', NULL, NULL);
INSERT INTO `blogstwos` VALUES (3, '4', '27', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_0\"></a>今天我们来教学伪类选择器</h2> \n<p>:not 除了自身其他的选择标签都要使用</p> \n<h1><a id=\"not_2\"></a>下面可以配合：not使用也可以单独使用</h1> \n<p>:first-child 第一个<br> :last-child 最后一个<br> :only-child 唯一一个<br> ：nth-child 第几个</p> \n<ol><li> <p>：not除了自身其他的选择标签都要使用<br> div{<!-- --><br> width: 100px;<br> height: 100px;</p> <pre><code> }\n div:not(:first-child){\n     color: red;\n }\n</code></pre> </li></ol> \n<p><img src=\"https://img-blog.csdnimg.cn/20210328200950222.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210328201001195.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 2.:first-child第一个使用<br> div:first-child{<!-- --><br> color: blue;<br> }</p> \n<p><img src=\"https://img-blog.csdnimg.cn/20210328201542939.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210328201550130.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 3.:last-child最后一个使用<br> div:last-child{<!-- --><br> color: brown;<br> font-size: 20px;</p> \n<pre><code>    }\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210328201809965.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210328201817314.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p>4.only-child唯一一个，只能是一个元素的子元素。<br> span:only-child{<!-- --><br> color: brown;<br> font-size: 20px;<br> }</p> \n<p><img src=\"https://img-blog.csdnimg.cn/2021032820240065.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210328202407403.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 5.：nth-child() 第几个，在后面括号里面填写第几个</p> \n<pre><code>  div&gt;ul li:nth-child(3){\n      color: chartreuse;\n      font-size: 30px;\n  }\n&lt;div&gt;\n    &lt;ul&gt;\n        &lt;li&gt;123&lt;/li&gt;\n        &lt;li&gt;456&lt;/li&gt;\n        &lt;li&gt;789&lt;/li&gt;\n        &lt;li&gt;1000&lt;/li&gt;\n        &lt;li&gt;1233&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/2021032820280162.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210328202808314.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h2><a id=\"_60\"></a>上面的元素会被其他的元素影响</h2> \n<h2><a id=\"_61\"></a>下面的元素不会被其他元素影响使用的方法都是跟上面一样</h2> \n<p>1.：first-of-type 第一个<br> 2.：last-of-type 最后一个<br> 3.：only-of-type 唯一一个<br> 4.：nth-of-type 第几个<br> 5.：nth-last-of-type 倒数第几个</p> \n<h2><a id=\"_67\"></a>谢谢大家观看</h2> \n<h2><a id=\"_68\"></a>菜鸡教学敬请见谅谢谢！</h2>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '菜鸡教学~5', '2021-03-28 20:34:03', 'ljh', '今天我们来教学伪类选择器:not  除了自身其他的选择标签都要使用下面可以配合：not使用也可以单独使用:first-child 第一个:last-child 最后一个:only-child 唯一一个：nth-child 第几个：not除了自身其他的选择标签都要使用div{width: 100px;height: 100px; } div:not(:first-child){     color: red; }2.:first-child第一个使用div:fir', NULL, NULL);
INSERT INTO `blogstwos` VALUES (4, '0', '15', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <p>上一期我们讲到了CSS中的四种基本选择器这一次我们来讲复杂选择器。</p> \n<p>第一个&lt;群组选择器&gt;比如<img src=\"https://img-blog.csdnimg.cn/20210314205010452.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 群组选择器是以逗号（,）隔开</p> \n<p>第二个是&lt;后代选择器&gt;比如<br> <img src=\"https://img-blog.csdnimg.cn/20210314211234881.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 后代选择器是以空格隔开，只要是后代都可以。</p> \n<p>第三个是&lt;子代选择器&gt;比如<br> <img src=\"https://img-blog.csdnimg.cn/20210314211433454.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> 子代选择器只能一层一层的选择，并且是以&gt;隔开</p> \n<p>还有一个就是伪类选择器&lt;：hover&gt;<br> <img src=\"https://img-blog.csdnimg.cn/20210314211750552.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> 伪类选择器是鼠标指向一个标签的适合变成你设置的另一个样式。</p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '菜鸡教学~2', '2021-03-14 21:20:47', 'ljh', '上一期我们讲到了CSS中的四种基本选择器这一次我们来讲复杂选择器。第一个<群组选择器>比如群组选择器是以逗号（,）隔开第二个是<后代选择器>比如后代选择器是以空格隔开，只要是后代都可以。第三个是<子代选择器>比如子代选择器只能一层一层的选择，并且是以>隔开还有一个就是伪类选择器<：hover>伪类选择器是鼠标指向一个标签的适合变成你设置的另一个样式。...', NULL, NULL);
INSERT INTO `blogstwos` VALUES (5, '0', '47', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"QQ_0\"></a>正则表达式匹配、手机号、QQ号、邮箱号</h2> \n<h3><a id=\"_1\"></a>第一个正则表达式匹配手机号</h3> \n<pre><code class=\"prism language-javascript\"><span class=\"token template-string\"><span class=\"token string\">``</span></span>`首先我们来创建一个变量接受用户输入的数据\n\n<span class=\"token keyword\">var</span> son <span class=\"token operator\">=</span> <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n然后再来一个变量接受正则匹配\n\n<span class=\"token keyword\">var</span> son1 <span class=\"token operator\">=</span> <span class=\"token regex\">/^[1][3,4,5,7,8]{2}[0-9]{8}$/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>son1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>son1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n这一组数据就是用来匹配用户输入手机号是否为正确\n\n首先一步一步来解读这句正则是什么意思\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span>\n\n两个<span class=\"token comment\">//在里面写表达式</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>是匹配首行，匹配用户输入的是否为<span class=\"token number\">1</span> 错误<span class=\"token number\">1</span>则<span class=\"token boolean\">false</span>、正确则<span class=\"token boolean\">true</span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>前面讲了<span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>是匹配首行，后面的<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>是只能匹配写在里面的数字，<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>只能匹配前面写的数字匹配两位\n<span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>只对前面紧挨着的生效，错误则<span class=\"token boolean\">false</span>、正确则<span class=\"token boolean\">true</span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>如上，前面讲了<span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>匹配首位和首位后面<span class=\"token number\">2.3</span>位数字\n后面的<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>是匹配<span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>里面的数字就是<span class=\"token number\">1.2</span><span class=\"token number\">.3</span><span class=\"token number\">.4</span><span class=\"token number\">.5</span><span class=\"token number\">.6</span><span class=\"token number\">.7</span><span class=\"token number\">.8</span><span class=\"token number\">.9</span><span class=\"token number\">.0</span>都可以被匹配，<span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span>前面讲了匹配前面里面的数字匹配<span class=\"token number\">9</span>位，\n错误则<span class=\"token boolean\">false</span>、正确则<span class=\"token boolean\">true</span>\n\n<span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span>\n这里最后一个$符号是以前面的<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>写的结尾，比如<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>就只能以数字结尾\n\n</code></pre> \n<h2><a id=\"QQQQ_33\"></a>第二个正则表达式匹配QQ号，基本理解了的话QQ号，邮箱号就好写了</h2> \n<pre><code class=\"prism language-javascript\">火星文正则<span class=\"token punctuation\">.</span>jpg\n<span class=\"token template-string\"><span class=\"token string\">``</span></span>`如上，先我们来创建一个变量接受用户输入的数据\n <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n          <span class=\"token keyword\">var</span> myreg<span class=\"token operator\">=</span><span class=\"token regex\">/^[1-9][0-9]{8,10}$/</span><span class=\"token punctuation\">;</span>如上，\n          <span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>$<span class=\"token operator\">/</span><span class=\"token punctuation\">}</span>连起来就是首位匹配<span class=\"token number\">1</span>到<span class=\"token number\">9</span>后面匹配<span class=\"token number\">8</span><span class=\"token operator\">-</span><span class=\"token number\">10</span>位<span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>里面的数字，错误则<span class=\"token boolean\">false</span>、正确则<span class=\"token boolean\">true</span>\n          \n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myreg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<h2><a id=\"_45\"></a>第三个正则表达式匹配邮箱号，这个跟前面就有点不一样了</h2> \n<pre><code class=\"prism language-javascript\">\n<span class=\"token template-string\"><span class=\"token string\">``</span></span>`如上，先我们来创建一个变量接受用户输入的数据\n\n <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n          <span class=\"token keyword\">var</span> myreg<span class=\"token operator\">=</span><span class=\"token regex\">/^[1-9]{1}[0-9]{9}@[1-9A-z]*\\.(cn | CN | com | COM | net | NET)$/</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>如上\n          \n          <span class=\"token operator\">/</span><span class=\"token operator\">^</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span>这里上面都讲了，为什么这一串后面会跟一个@符号，是因为邮箱都有一位是@符\n          前面匹配完了之后必须匹配到用户输入的@符号才能匹配后面否则<span class=\"token boolean\">false</span>\n          \n          <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>A<span class=\"token operator\">-</span>z<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>\\<span class=\"token punctuation\">.</span>这是什么意思呢， <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>A<span class=\"token operator\">-</span>z<span class=\"token punctuation\">]</span>上面也讲了<span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>是什么意思，\n          这里说一下<span class=\"token constant\">A</span><span class=\"token operator\">-</span>z是可以匹配<span class=\"token constant\">A</span>到z里面的所有字母不区分大小写是因为写的是 大写<span class=\"token constant\">A</span>到小写z\n          \n          <span class=\"token operator\">*</span>\\<span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span>在正则里面表示的意思是可以匹配零个或者多个字符，什么字符都能匹配就算@后面写一样会<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          \n          \\斜杠代表着转义字符因为不写转义字符<span class=\"token punctuation\">.</span>在正则里面有特殊意思，转义之后就是<span class=\"token punctuation\">.</span>\n          \n          <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">|</span> <span class=\"token constant\">CN</span> <span class=\"token operator\">|</span> com <span class=\"token operator\">|</span> <span class=\"token constant\">COM</span> <span class=\"token operator\">|</span> net <span class=\"token operator\">|</span> <span class=\"token constant\">NET</span><span class=\"token punctuation\">)</span>$这是一个分组，用户输入了这个分组里面其中一个才可以匹配成功<span class=\"token boolean\">true</span>并且以这里其中一个结尾\n          \n          $的意思是必须以他前面的写的东西结尾才能匹配成功<span class=\"token boolean\">true</span>\n          \n          \n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myreg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      \n\n\n</code></pre> \n<h2><a id=\"QQ_75\"></a>基础正则匹配手机号邮箱号QQ号</h2> \n<h1><a id=\"_76\"></a>谢谢观看，敬请见谅！</h1>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '正则表达式匹配、手机号、QQ号、邮箱号', '2021-04-10 09:01:38', 'ljh', '正则表达式匹配、手机号、QQ号、邮箱号第一个正则表达式匹配手机号```首先我们来创建一个变量接受用户输入的数据var son = number(prompt(\"\"))然后再来一个变量接受正则匹配var son1 = /^[1][3,4,5,7,8]{2}[0-9]{8}$/;console.log(son1.test(son1))这一组数据就是用来匹配用户输入手机号是否为正确首先一步一步来解读这句正则是什么意思/^[1][3,4,5,7,8][0-9]{9}$/两个//在里面', NULL, NULL);
INSERT INTO `blogstwos` VALUES (7, '0', '16', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_0\"></a>闭包</h2> \n<p><em><strong>闭包就是内部的函数被拿到外部调用，会造成原本的作用域链不会被释放，就会造成内存泄漏</strong></em></p> \n<ul><li>上期讲到了什么是作用域链如果不了解可以去看看</li><li>这个b是在函数内部声明的函数，这个函数属于a函数的作用域不能在外部被调用，如果被调用肯定会报错阻止进程，但是形成了闭包就可以被外部调用</li></ul> \n<ol><li>那什么样会形成闭包呢，可以来说只要 return就是闭包了</li><li>逻辑：<br> <em><strong>—全局作用域里面本来没有b这个函数，就不能被调用如果被调用就会报错，但是现在可以在全局里面被调用了不会报错<br> 是因为每个函数执行前会创建一个AO用来支持该函数运行用完立即销毁，但是现在一个函数里面还有一个函数，当函数a被执行完本来AO就该销毁了，但是想想如果a函数的AO被销毁了那里面的b函数怎么办呢，这时候就形成了闭包，a函数的AO就不会被销毁因为还有b函数没有被i调用，但是还需要return出去才能在全局里面调用。return了基本就是闭包</strong></em></li></ol> \n<h4><a id=\"_9\"></a>注意：形成了闭包一定会造成内存泄漏</h4> \n<pre><code class=\"prism language-javascript\">       <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n           <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n               num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n               console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span><span class=\"token string\">\"这是一个闭包\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span>\n           <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210424212643404.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> <em><strong>—其实是把b函数返回给了a函数，外部需要一个变量来接收a函数执行返回来的值，这个值就是b函数，用外部声明的str执行b函数执行符号(),这里的知识也包含了作用域链</strong></em></p> \n<ul><li>什么是内存泄漏：一个函数运行之前创建支持该函数运行的AO用完就销毁，但是形成闭包了就无法销毁就会造成内存泄漏，久而久之多了内存就会卡顿</li></ul> \n<h2><a id=\"_28\"></a>包装类</h2> \n<ol><li>Number()</li><li>String()</li><li>Boolean()</li></ol> \n<ul><li>包装类就是本来一个变量没有Number()、String()、Boolean()属于他们的方法比如：</li><li>数字Number()类型的parseFloat()等等众多方法</li><li>字符串String()类型的charAt()等等众多方法</li><li>布尔Boolean()类型的true或false等等众多方法<br> <em><strong>—都是通过JS的包装类给这些变量来包装这些方法所以才能使用方法和属性</strong></em></li></ul>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'JS高级，闭包、包装类', '2021-04-25 19:16:44', 'ljh', '闭包闭包就是内部的函数被拿到外部调用，会造成原本的作用域链不会被释放，就会造成内存泄漏上期讲到了什么是作用域链如果不了解可以去看看这个b是在函数内部声明的函数，这个函数属于a函数的作用域不能在外部被调用，如果被调用肯定会报错阻止进程，但是形成了闭包就可以被外部调用那什么样会形成闭包呢，可以来说只要 return就是闭包了逻辑：—全局作用域里面本来没有b这个函数，就不能被调用如果被调用就会报错，但是现在可以在全局里面被调用了不会报错是因为每个函数执行前会创建一个AO用来支持该函数运行用完立', NULL, NULL);
INSERT INTO `blogstwos` VALUES (8, '0', '14', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_0\"></a>运动框架中的缓冲运动，缓冲运动是由快到慢</h2> \n<h5><a id=\"_2\"></a>上期讲了匀速运动其实缓冲运动跟匀速运动没什么区别就是多了一个</h5> \n<pre><code class=\"prism language-javascript\">speed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> Rundiv<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">7</span> \n</code></pre> \n<ul><li>css样式</li></ul> \n<pre><code class=\"prism language-javascript\"> div<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n            background<span class=\"token operator\">-</span>color<span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n            position<span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n            left<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        span<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span>px<span class=\"token punctuation\">;</span>\n            left<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>px<span class=\"token punctuation\">;</span>\n            position<span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n            background<span class=\"token operator\">-</span>color<span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        button<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n            margin<span class=\"token operator\">-</span>top<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<ul><li>html样式</li></ul> \n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"qwe\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token operator\">&gt;</span>运动<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre> \n<ul><li>js代码<br> — 先写代码再讲逻辑</li></ul> \n<pre><code class=\"prism language-javascript\"> <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n        <span class=\"token keyword\">var</span> Rundiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qwe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> Runtimer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        btn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>Rundiv<span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>Runtimer<span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">var</span> speed <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n           Runtimer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                speed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> Rundiv<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n                speed <span class=\"token operator\">=</span> speed <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Rundiv<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>Runtimer<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                    Rundiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> Rundiv<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">+</span> speed <span class=\"token operator\">+</span><span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Rundiv<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n         \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210418144033956.gif#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210418144047447.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ul><li>可以看出元素运动是由快到慢的 移动的px也是由多到少直到停止</li></ul> \n<pre><code class=\"prism language-javascript\">                speed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> Rundiv<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n                speed <span class=\"token operator\">=</span> speed <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Rundiv<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>Runtimer<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                    Rundiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> Rundiv<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">+</span> speed <span class=\"token operator\">+</span><span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Rundiv<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<ol><li>先把speed 赋值为 传入500减去div实时的left值然后除以7</li><li>再把speed赋值一次为 实时left值除以7大于0</li></ol> \n<pre><code class=\"prism language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span>\n</code></pre> \n<ul><li>如果speed值大于0 则为实时值除以7有小数对小数进行下舍，就是只要后面有小数都不要</li><li>如果speed值小于0 则为实时值除以7 是0.几的时候进行上舍 ，就是如果除以7等于0.1进行上舍就是1</li></ul> \n<ol start=\"3\"><li>判断</li></ol> \n<pre><code class=\"prism language-javascript\">                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Rundiv<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>Runtimer<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                    Rundiv<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> Rundiv<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">+</span> speed <span class=\"token operator\">+</span><span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n</code></pre> \n<ul><li>判断div实时值是否等于上面传入的500，等于500则走进正确里面清楚计时器</li><li>判断不等于则走进错误里面进行元素移动到最后越除以7次数多了之后再除以就会有0.几的小数，后面就只会进行1px移动直到实时left值等于500就清除计时器<br> <img src=\"https://img-blog.csdnimg.cn/20210418145503831.jpg#pic_center\" alt=\"在这里插入图片描述\"></li><li>到494px这里开始1px移动</li></ul>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'js运动框架2', '2021-04-18 19:24:41', 'ljh', '运动框架中的缓冲运动，缓冲运动是由快到慢上期讲了匀速运动其实缓冲运动跟匀速运动没什么区别就是多了一个speed = (target - Rundiv.offsetLeft) / 7 css样式 div{            width: 100px;            height: 100px;            background-color: red;            position: absolute;            left: 0px;    ', NULL, NULL);
INSERT INTO `blogstwos` VALUES (9, '0', '21', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <p>##今天我们来讲一讲边框字体和文本、边框</p> \n<p>##文本样式有哪些<br> 字体<br> 1.字体的颜色：color<br> 2.字体的大小：font-size px为单位<br> 3.字体格式：font-family<br> 4.字体的行行高：line-height 是以宽高多少设置<br> 5.字体的粗细：font-weight（取值有100-900从小到大）bold=900<br> 6.字体倾斜：font-style：italic<br> div{<!-- --><br> width: 100px;<br> height: 100px;<br> color: red;<br> font-size: 100px;<br> font-family: 楷体;<br> line-height: 100px;<br> font-weight: bold;<br> font-style: italic;<br> }<img src=\"https://img-blog.csdnimg.cn/20210317221401988.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/2021031722142274.jpg#pic_right\" alt=\"在这里插入图片描述\"></p> \n<p>文本<br> 1.文本的水平位置:text-align 分别是（left 左）、（中center）、（右ringht）<br> 2.垂直位置line-height刚刚上面讲到了也就是行高<br> 3.首行缩进text-indent 单位是em<br> 4.划线text-decoration 分别的是下划线underline、上划线overline、中划线linethrough<br> div{<!-- --><br> width: 100px;<br> height: 100px;<br> border: 1px solid red;<br> /* text-align: center; */<br> line-height: 100px;<br> text-indent: 1em;<br> text-decoration: underline;<br> }<img src=\"https://img-blog.csdnimg.cn/20210317222617688.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210317222654817.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210317222701513.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p>##边框,上面也用到了边框<br> ##border<br> 1.border-width 边框的粗细 单位px<br> 2.border-style 实线solid<br> 3.border-color 边框的颜色<br> 上面的组合写法：border: 1px solid red;<br> div{<!-- --><br> width: 300px;<br> height: 300px;<br> border: 3px solid red;<br> }<br> <img src=\"https://img-blog.csdnimg.cn/20210317223149525.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p><img src=\"https://img-blog.csdnimg.cn/2021031722315716.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> ##还可以单独设置一个边框<br> 1.border-top 上边框<br> 2.border-bottom 下边框<br> 3.border-left 左边框<br> 4.border-right 右边框<br> div{<!-- --><br> width: 300px;<br> height: 300px;<br> border-right: 3px solid red;<br> }<br> <img src=\"https://img-blog.csdnimg.cn/20210317223457336.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210317223518620.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '菜鸡教学~3', '2021-03-17 22:36:16', 'ljh', '##今天我们来讲一讲边框字体和文本、边框##文本样式有哪些字体1.字体的颜色：color2.字体的大小：font-size px为单位3.字体格式：font-family4.字体的行行高：line-height  是以宽高多少设置5.字体的粗细：font-weight（取值有100-900从小到大）bold=9006.字体倾斜：font-style：italicdiv{width: 100px;height: 100px;color: red;font-size: 100px;f', NULL, NULL);
INSERT INTO `blogstwos` VALUES (10, '0', '23', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <p>##属性选择器~、^、*、$、|<br> 使用方法要用 [样式]<br> 第一个只要里面包含了属性这个属性就可以选择<br> ：比如<br> [title]{<!-- --><br> width: 200px;<br> height: 200px;<br> margin: 200px auto;<br> background-color: aqua;<br> }<br> <img src=\"https://img-blog.csdnimg.cn/20210321221752243.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p><img src=\"https://img-blog.csdnimg.cn/20210321221805113.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p>~是只要里面拥有这个属性值就可以选择，但是必须是独立存在要用空格隔开<br> 比如： [title~=“A”]{<!-- --><br> width: 200px;<br> height: 200px;<br> margin: 200px auto;<br> background-color: red;<br> }<br> <img src=\"https://img-blog.csdnimg.cn/20210321222134801.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p><img src=\"https://img-blog.csdnimg.cn/20210321222142948.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p>^是以属性值开头的才能选择到<br> ：比如</p> \n<div title=\"CBC\"></div> \n<div title=\"BCC\"></div> \n<p><img src=\"https://img-blog.csdnimg.cn/202103212227578.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p><img src=\"https://img-blog.csdnimg.cn/20210321222805505.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> *是只要里面包含了这个属性就可以选择，不用开头也用隔开<br> ：比如</p> \n<div title=\"bot\"></div> \n<div title=\"bto\"></div> \n<p><img src=\"https://img-blog.csdnimg.cn/20210321223032900.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/20210321223039449.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"><br> $是以属性值结尾的才能选择到<br> ：比如</p> \n<div title=\"rub\"></div> \n<div title=\"rbu\"></div> \n<p><img src=\"https://img-blog.csdnimg.cn/20210321223258114.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p><img src=\"https://img-blog.csdnimg.cn/20210321223306154.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p>|是以属性值开头并以-连接才能选择到<br> ：比如</p> \n<div title=\"t-op\"></div> \n<div title=\"top\"></div> \n<p><img src=\"https://img-blog.csdnimg.cn/20210321223505447.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p><img src=\"https://img-blog.csdnimg.cn/20210321223512400.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p>##再教大家一个文字阴影box-shadow<br> text-shadow: 3px 3px 3px red;<br> 里面一共有三个值分别是1.阴影的X轴位置，2.阴影Y轴的位置，3.阴影的模糊程度，4.阴影的颜色<br> | y轴<br> — X轴<br> 比如</p> \n<div title=\"t-op\">\n 轰轰烈烈\n</div> \n<div title=\"top\">\n 轰轰烈烈\n</div> \n<p><img src=\"https://img-blog.csdnimg.cn/20210321224054867.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p><img src=\"https://img-blog.csdnimg.cn/20210321224102312.jpg#pic_center\" alt=\"在这里插入图片描述\"><br> ##这期菜鸡新手教学就到这里。<br> ##谢谢大家！</p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', '菜鸡教学~4', '2021-03-21 22:42:31', 'ljh', '##属性选择器~、^、*、$、|使用方法要用  [样式]第一个只要里面包含了属性这个属性就可以选择：比如[title]{width: 200px;height: 200px;margin: 200px auto;background-color: aqua;}~是只要里面拥有这个属性值就可以选择，但是必须是独立存在要用空格隔开比如：  [title~=“A”]{width: 200px;height: 200px;margin: 200px auto;background-', NULL, NULL);
INSERT INTO `blogstwos` VALUES (11, '0', '19', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"js_0\"></a>js是一门解释型语言，解释一句执行一句</h2> \n<ul><li>js执行的过程</li><li>通篇语法扫描检查错误</li><li>预编译：</li><li>代码执行顺序，逐行执行</li></ul> \n<h2><a id=\"1_js_6\"></a>1. 通篇语法扫描检查错误：不管写多少行代码，代码执行前js都会进行语法检查错误</h2> \n<pre><code class=\"prism language-javascript\"> <span class=\"token comment\">// 通篇语法扫描检查错误</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里报错下面就不执行了</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210423185333730.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h2><a id=\"_17\"></a>全局预编译</h2> \n<ol><li>创建以个函数的GO对象（执行期上下文对象）（Global Object）</li><li>将var声明的变量成为AO对象的属性，值为undefined，遇到重名不做变化，不覆盖</li><li>将function声明的函数成为AO对象的属性，值为函数执行代码，重名直接覆盖</li></ol> \n<ul><li>全局预编译与函数预编译是差不多的，一个是script标签执行前创造一个GO对象，将script里面声明的变量和函数成为AO的属性，一个是函数执行前创建AO</li></ul> \n<pre><code class=\"prism language-javascript\">   <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 全局预编译</span>\n        <span class=\"token constant\">GO</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token constant\">AO</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token comment\">// 第一次A属性</span>\n                a <span class=\"token punctuation\">:</span> undefined \n                 <span class=\"token comment\">// 第一次B属性</span>\n                b <span class=\"token punctuation\">:</span> undefined\n                <span class=\"token comment\">// 第二次A属性是函数直接覆盖上一次A属性</span>\n                a <span class=\"token punctuation\">:</span>  <span class=\"token keyword\">function</span>  \n                <span class=\"token comment\">// A函数执行前又生成一个AO属性为C</span>\n                <span class=\"token constant\">AO</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token comment\">// 第一次C</span>\n                    c ： undefined\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<h2><a id=\"_52\"></a>预编译</h2> \n<ul><li>什么是预编译，执行期上下文叫预编译<br> 解释：就是在一个函数运行之前在内存里面创建一个空间，为此函数要执行的数据提供支持<br> —变量声明提升 —函数声明提升：变量声明就是在声明一个变量后会提升到顶端、函数声明一个函数后也会提升到顶端</li></ul> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">this</span>\nao\naarguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n</code></pre> \n<ul><li>函数预编译：</li></ul> \n<ol><li>上面讲到了从一个函数运行之前会预编译 创建一个AO（执行期上下文）（Activation Object）</li><li>函数的形参成为AO（Activation Object）对象的一个属性，值为传入的实参，如果未传参，则值为udefined</li><li>将var声明的变量，也是成为AO（Activation Object）的对象属性，值为udefined，遇到重名的不做任何变化：不覆盖不成为属性</li><li>将function声明的函数，一样成为AO（Activation Object）对象的属性，值为要执行的函数体，遇到重名直接覆盖前面的，跟var声明不同</li></ol> \n<ul><li>执行b()函数执行函数，打印a因为刚刚a声明提升至函数顶端是，a :undefined为什么不是1， ，因为js是逐行执行还为到给a赋值1的一行，都将var声明提升了所以undfined</li></ul> \n<pre><code class=\"prism language-javascript\">   <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n       <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 预编译开始</span>\n        <span class=\"token comment\">// 创建AO{<!-- --></span>\n        <span class=\"token comment\">//     第一次a为undefined</span>\n        <span class=\"token comment\">//     a :undefined</span>\n        <span class=\"token comment\">//     预编译完</span>\n        <span class=\"token comment\">//     第二次赋值a为1</span>\n        <span class=\"token comment\">// }</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210423191754749.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ul><li>函数的形参成为AO（Activation Object）对象的一个属性，值为传入的实参，如果未传参，则值为udefined，都将var声明提升了所以undfined<br> ：未传入参数undefined</li></ul> \n<pre><code class=\"prism language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n       <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n       <span class=\"token comment\">//预编译开始</span>\n       <span class=\"token comment\">//创建AO{<!-- --></span>\n        <span class=\"token comment\">//    属性</span>\n        <span class=\"token comment\">//        num：undefined</span>\n        <span class=\"token comment\">//    }    </span>\n        <span class=\"token comment\">// 未传入参数undefined</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/2021042319230028.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p>-将function声明的函数，一样成为AO（Activation Object）对象的属性，值为要执行的函数体，遇到重名直接覆盖前面的，跟var声明不同</p> \n<pre><code class=\"prism language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n       <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//    预编译开始</span>\n    <span class=\"token comment\">// 创建AO{<!-- --></span>\n        <span class=\"token comment\">// a:undefined</span>\n        <span class=\"token comment\">// a:function//覆盖上面a：undefined</span>\n        <span class=\"token comment\">//打印a函数</span>\n    <span class=\"token comment\">// }</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210423193710248.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ul><li>将var声明的变量，也是成为AO（Activation Object）的对象属性，值为udefined，<em><strong>遇到重名的不做任何变化：不覆盖不成为属性</strong></em><br> —因为预编译是看不见的也没法证明第二a没有覆盖前一个：只有执行了第一次a赋值为1第二次赋值为2才会覆盖</li></ul> \n<pre><code class=\"prism language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n       <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//    预编译开始</span>\n    <span class=\"token comment\">// 创建AO{<!-- --></span>\n        <span class=\"token comment\">// 属性</span>\n        <span class=\"token comment\">//第一个a为    </span>\n        <span class=\"token comment\">// a : undefined</span>\n        <span class=\"token comment\">// 第二a重名了</span>\n        <span class=\"token comment\">// a : undefined 不做任何变化不覆盖</span>\n    <span class=\"token comment\">// }</span>\n</code></pre> \n<h2><a id=\"_140\"></a>预编译前奏</h2> \n<ol><li>imply global 暗示全局变量：即任何变量，如果变量未经声明就赋值。此变量就归全局所有(window)</li><li>所有声明的全局变量，都是(window)属性</li></ol> \n<ul><li> <p>大家都知道函数里面声明的变量外部不可用，但是在函数内部未经声明就赋值的变量，就归全局所有(window)，此时全局就可以调用</p> </li><li> <p>此时可以在函数外部调用吗？肯定是可以，因为未经声明就赋值此变量归全局</p> </li></ul> \n<pre><code class=\"prism language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            b <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210423230827927.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h2><a id=\"_156\"></a>作用域</h2> \n<ul><li>作用域就是变量和函数可以访问的区域</li></ul> \n<h3><a id=\"_158\"></a>两种作用域</h3> \n<ol><li><em><strong>全局作用域</strong></em></li></ol> \n<ul><li>写在script标签中的代码，全局作用域中的变量声明会被提升到script标签顶部进行定义。成为全局对象的属性（window）</li></ul> \n<ol start=\"2\"><li><em><strong>局部作用域可以说是函数的作用域</strong></em></li></ol> \n<ul><li>在script标签里面声明一个函数，这个函数的{}括号里面就是一个局部的作用域，里面声明的变量会被提升到函数作用域顶部进行定义，不会成为全局对象的属性（window）</li></ul> \n<ol start=\"3\"><li><em><strong>变量污染</strong></em></li></ol> \n<ul><li>函数中声明的变量不会造成全局变量的污染，请把每一个功能封装成为一个函数，因为全局变量谁都可以调用</li></ul> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 写在script里面不是函数里面的是全局作用域</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> y<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> z<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 这是d函数里面的一个局部作用域不能被外部使用除非return这是闭包的用法</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<h2><a id=\"_179\"></a>作用域链</h2> \n<ol><li>万物皆对象：函数也是对象，有的对象属性我们可以访问到比如name，但是有些属性是我们访问不到的，只有JS引擎进行读取</li><li>[[scope]]就是只有JS引擎可以读取的函数属性是：所有的执行期上下文的集合，把所有的GO、AO集合起来</li></ol> \n<ul><li>执行期上下文对象，是当一个函数执行时，创建一个支持改函数数据，每一个都是独一无二，如果再执行 一次此函数虽然数据是一样的，但是是独一无二的，执行一次创建一次，执行完立即销毁</li><li><img src=\"https://img-blog.csdnimg.cn/20210423234009628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></li></ul> \n<h1><a id=\"_184\"></a>按照自己的思想写的作用域链结构图，可能错误！见谅</h1>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'JS高级，预编译、作用域、作用域链', '2021-04-23 23:41:34', 'ljh', 'js是一门解释型语言，解释一句执行一句js执行的过程通篇语法扫描检查错误预编译：代码执行顺序，逐行执行1. 通篇语法扫描检查错误：不管写多少行代码，代码执行前js都会进行语法检查错误 // 通篇语法扫描检查错误        console.log(\"1\");        console.log(a);//这里报错下面就不执行了        console.log(\"3\");预编译什么是预编译，执行期上下文叫预编译解释：就是在一个函数运行之前在内存里面创建一个空间，为此', NULL, NULL);
INSERT INTO `blogstwos` VALUES (12, '0', '12', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_1\"></a>运动框架中的匀速运动</h2> \n<ol><li>css样式</li></ol> \n<pre><code class=\"prism language-javascript\">  div<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n            background<span class=\"token operator\">-</span>color<span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n            position<span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        span<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span>px<span class=\"token punctuation\">;</span>\n            left<span class=\"token punctuation\">:</span> <span class=\"token number\">500</span>px<span class=\"token punctuation\">;</span>\n            position<span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n            background<span class=\"token operator\">-</span>color<span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        button<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n            margin<span class=\"token operator\">-</span>top<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<p>2.html样式</p> \n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>span<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>button<span class=\"token operator\">&gt;</span>运动<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\n</code></pre> \n<ol start=\"3\"><li> <p>设置好css样式和html样式之后页面出来的是， 我们今天讲得内容是让元素匀速运动所以设置成这样 一个div+span+button，点击运动让div移动到span后面去<br> <img src=\"https://img-blog.csdnimg.cn/20210418124055891.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> </li><li> <p>js<br> — 首先把代码写出来再讲代码逻辑</p> </li></ol> \n<pre><code class=\"prism language-javascript\">        <span class=\"token keyword\">var</span> Rundiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取div元素</span>\n        <span class=\"token keyword\">var</span> but <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//获取button元素</span>\n        <span class=\"token keyword\">var</span> Runtimer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//设置一个全局time变量占位</span>\n        \n         but<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">divmove</span><span class=\"token punctuation\">(</span>Rundiv<span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//点击button执行函数</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token comment\">//给button按钮设置一个鼠标点击事件</span>\n        \n        <span class=\"token keyword\">function</span> <span class=\"token function\">divmove</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//封装一个运动函数</span>\n            <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>Runtimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//清除计时器</span>\n            <span class=\"token keyword\">var</span> speed <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span>dom<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//三元运算符</span>\n            Runtimer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>  <span class=\"token comment\">//计时器</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> dom<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>Runtimer<span class=\"token punctuation\">)</span>\n                    dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span> <span class=\"token number\">500</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                    dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">+</span> speed <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210418134706989.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n<p><img src=\"https://img-blog.csdnimg.cn/2021041813492063.gif#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ul><li>计时器每30毫秒改变div元素left位置因为我设置了每次改变9px所以是每次叠加9px</li></ul> \n<h2><a id=\"_68\"></a>逻辑：</h2> \n<pre><code class=\"prism language-javascript\"> <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>Runtimer<span class=\"token punctuation\">)</span>\n           <span class=\"token keyword\">var</span> speed <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span>dom<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n           Runtimer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> dom<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>Runtimer<span class=\"token punctuation\">)</span>\n                    dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span> <span class=\"token number\">500</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                    dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">+</span> speed <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span>\n                <span class=\"token punctuation\">}</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n         \n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre> \n<ul><li></li></ul> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> speed <span class=\"token operator\">=</span> target <span class=\"token operator\">-</span>dom<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//三元运算符</span>\n</code></pre> \n<p>这里的target是上面传入的实参500 ， 500-当前div实时的left值0，500-0=0 &gt;大于 0 speed就是9 ，如果小于0就是-9</p> \n<ul><li></li></ul> \n<pre><code class=\"prism language-javascript\">Runtimer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n              \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p>设置一个Runtimer的计时器，每30毫秒重重一次里面的代码</p> \n<ul><li></li></ul> \n<pre><code class=\"prism language-javascript\">                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> dom<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>Runtimer<span class=\"token punctuation\">)</span>\n                    dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span> <span class=\"token number\">500</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                    dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">+</span> speed <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span>\n                <span class=\"token punctuation\">}</span>\n\n</code></pre> \n<p>连起来就是每30毫秒判断一次 left值，判断500减去当前实时left值是否 &lt;小于9，小于的话就可以走进</p> \n<pre><code class=\"prism language-javascript\">                   <span class=\"token punctuation\">}</span>\n                    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>Runtimer<span class=\"token punctuation\">)</span>\n                    dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span> <span class=\"token number\">500</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n</code></pre> \n<ul><li>判断不小于9则会走进else里面</li></ul> \n<pre><code class=\"prism language-javascript\">                <span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                    dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> dom<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">+</span> speed <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span>\n                <span class=\"token punctuation\">}</span>\n\n</code></pre> \n<p>我们就是要这个判断开始走不进正确里面，只能走进else里面这样才能让元素移动</p> \n<ol><li>第一次走进else里面 div的left值为 0+9</li><li>第二次走进则为9+9</li><li>直到500-每次叠加9小于9才会走进正确里面，清除计时器，然后直接从495赋值500 就是相当于最后一步只移动了5px</li></ol>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'js运动框架', '2021-04-18 14:12:53', 'ljh', '运动框架中的匀速运动css样式  div{            width: 100px;            height: 100px;            background-color: red;            position: absolute;        }        span{            width: 1px;            height: 150px;            left: 500px;          ', NULL, NULL);
INSERT INTO `blogstwos` VALUES (13, '0', '39', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_0\"></a>手风琴</h2> \n<ul><li>什么是手风琴先来看一下手风琴效果，下面看到的就是手风琴效果点击一下就可以让下边栏自动弹出，再点击一下收回<br> <img src=\"https://img-blog.csdnimg.cn/20210502183235837.gif#pic_center\" alt=\"在这里插入图片描述\"></li></ul> \n<h3><a id=\"_4\"></a>逻辑</h3> \n<p>— 怎么让他点击 一下弹出再点击一下收回这里主要是通过for循环和if判断收回和点击</p> \n<ul><li>js代码</li></ul> \n<pre><code class=\"prism language-javascript\"> <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">var</span>  one <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span>  two <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>one<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>myi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n        one<span class=\"token punctuation\">[</span>myi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">oncilcik</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>two<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myi <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">continue</span>\n                <span class=\"token punctuation\">}</span>\n                two<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\"0px\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>two<span class=\"token punctuation\">[</span>myi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token string\">\"0px\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                two<span class=\"token punctuation\">[</span>myi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\"60px\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                two<span class=\"token punctuation\">[</span>myi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\"0px\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> \n<ol><li>可以看到上面代码有两个for循环和一个立即执行函数，两个判断；</li><li>第一个循环是循环的你要点击的那个元素，因为有四个需要点击的所以需要用循环来减少代码；</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>one<span class=\"token punctuation\">.</span>lenght<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">}</span>\n</code></pre> \n<ol start=\"4\"><li>为什么要用立即执行函数是因为，不用立即执行函数这个i值只会有最后一次，用了之后就是循环一次执行一次函数传入一个值</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>myi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n</code></pre> \n<ol start=\"5\"><li>在立即执行函数里面再写一个循环和判断，第二个循环是循环给需要弹出的数据加上高度为0，因为我们是用高度弹出的，不是用display:none然后再第二循环里面写一个判断，判断所有的都循环加上0px，不然回造成bug无法弹出</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>myi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>two<span class=\"token punctuation\">.</span>lenght<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myi <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">continue</span>\n<span class=\"token punctuation\">}</span>\ntwo<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\"0px\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n</code></pre> \n<ol start=\"6\"><li>第二个判断是判断点击回弹点击一下给高度添加60px，再点击一下设置为0px,获取一下two的高度在判断</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>two<span class=\"token punctuation\">[</span>myi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token string\">\"0px\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            two<span class=\"token punctuation\">[</span>myi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\"60px\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n            two<span class=\"token punctuation\">[</span>myi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\"0px\"</span>\n            <span class=\"token punctuation\">}</span>\n</code></pre> \n<p>—这样一个简单版的手风琴效果就做好了</p> \n<ul><li> <h5><a id=\"_68\"></a>所有代码在这</h5> </li></ul> \n<pre><code class=\"prism language-javascript\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1.0\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">&gt;</span>Document<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>style<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">{<!-- --></span>\n            margin<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            padding<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            list<span class=\"token operator\">-</span>style<span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>one<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>px<span class=\"token punctuation\">;</span>\n            background<span class=\"token operator\">-</span>color<span class=\"token punctuation\">:</span> antiquewhite<span class=\"token punctuation\">;</span>\n            text<span class=\"token operator\">-</span>align<span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n            line<span class=\"token operator\">-</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span>two<span class=\"token punctuation\">{<!-- --></span>\n            width<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span>px<span class=\"token punctuation\">;</span>\n            height<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>\n            overflow<span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n            background<span class=\"token operator\">-</span>color<span class=\"token punctuation\">:</span> burlywood<span class=\"token punctuation\">;</span>\n            transition<span class=\"token punctuation\">:</span> height <span class=\"token number\">1</span>s<span class=\"token punctuation\">;</span>\n            text<span class=\"token operator\">-</span>align<span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"one\"</span><span class=\"token operator\">&gt;</span><span class=\"token constant\">A</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>ul <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"two\"</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"one\"</span><span class=\"token operator\">&gt;</span><span class=\"token constant\">B</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>ul <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"two\"</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"one\"</span><span class=\"token operator\">&gt;</span><span class=\"token constant\">C</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>ul <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"two\"</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"one\"</span><span class=\"token operator\">&gt;</span><span class=\"token constant\">D</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>ul <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"two\"</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token number\">3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n        <span class=\"token keyword\">var</span> one <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> two <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>one<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>myi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                one<span class=\"token punctuation\">[</span>myi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>two<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myi <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                            <span class=\"token keyword\">continue</span>\n                        <span class=\"token punctuation\">}</span>\n                        two<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\"0px\"</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>two<span class=\"token punctuation\">[</span>myi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token string\">\"0px\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n                        two<span class=\"token punctuation\">[</span>myi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\"60px\"</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{<!-- --></span>\n                        two<span class=\"token punctuation\">[</span>myi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\"0px\"</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">&gt;</span>\n</code></pre>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'JS写手风琴效果', '2021-05-02 19:29:04', 'ljh', '手风琴什么是手风琴先来看一下手风琴效果，下面看到的就是手风琴效果点击一下就可以让下边栏自动弹出，再点击一下收回逻辑—	怎么让他点击 一下弹出再点击一下收回这里主要是通过for循环和if判断收回和点击js代码', NULL, NULL);
INSERT INTO `blogstwos` VALUES (14, '0', '9', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_0\"></a>题目：五张图片通过普通按钮点击切换下一张，上一张。</h2> \n<pre><code> &lt;img src=\"1.jpg\"&gt;这是图片\n \n&lt;button&gt;点击切换下一张&lt;/button&gt; 按钮\n\n&lt;button id=\"qwe\"&gt;点击切换上一张&lt;/button&gt; 按钮\n接下来是链接上面的按钮\n&lt;script&gt;\n把所有功能封装到一个函数里面去\nfunction fn(){\n我们再创建一个变量来接收,返回的伪数组。\n document.getElementsByTagName意思是：通过方法获取元素节点，\n 通过元素名获取对应的元素，获取取来的是一个类数组对象\nvar son = document.getElementsByTagName(\"img\")[0];\n\n\nvar num = document.getElementsByTagName(\"button\")[0];\n这里道理如上都需要变量来接收返回的数据。\n\n\nvar num2 = document.getElementById(\"qwe\")\n这里道理如上都需要变量来接收返回的数据。\n\n\nvar i = 1;\n这是创建一个变量设置为1\n\n到这里之后就需要用到点击事件\n点击一下num改变图片路径就达成切换图片\nnum.onclick = function(){\ni++；上面i已经为1这里再i++则为2\n\n这里需要判断一下\n如果i=5则把i从新赋值1\nif（i == 5）{\ni =1 \n}\n\n这里使用了字符串拼接方法改变图片路径\n上面已经i= 2了这里则的意思为\nimg src= \"./2.jpg\"\nson.src = \"./\"+ i +\" .jpg\"\n这样就已经完成了点击切换下一张图片然后只需要复制黏贴一下就可以完成点击\n切换上一张图片了。\n\n到了这里i变i--了是因为切换到上一张图片需要-1\n num2.onclick = function(){\n    i--;\n    这里判断i如果减到了0\n    则重新把i赋值为5\n    if(i == 0){\n        i = 5;\n    }\n    son.src = \"./\"+ i +\".jpg\"\n}\n}\n}\n&lt;/script&gt;\n</code></pre> \n<h2><a id=\"_64\"></a>谢谢观看，敬请见谅！</h2>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'javascript事件点击', '2021-04-09 19:52:56', 'ljh', '题目：五张图片通过普通按钮点击切换下一张，上一张。这是图片点击切换下一张 按钮点击切换上一张按钮接下来是链接上面的按钮把所有功能封装到一个函数里面去我们再创建一个变量来接收,返回的伪数组。', NULL, NULL);
INSERT INTO `blogstwos` VALUES (15, '0', '6', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_0\"></a>递归</h2> \n<p>—通俗来讲就是在一个函数体内调用该函数</p> \n<ul><li>就拿斐波那契数列来讲递归，主要是找到规律，斐波那契数列的规律就是前两位加起来的和就是第三</li></ul> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里是定义斐波那契数列的前两位 </span>\n<span class=\"token keyword\">var</span> num3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里定义之和</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>x<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\nnum1 <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">;</span>\nnum2 <span class=\"token operator\">=</span> num3<span class=\"token punctuation\">;</span>\nnum3 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> num3<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p>— 这就是求出斐波那契数列的第九位可以通过这个规律来找到一个公式</p> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token constant\">FB</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> <span class=\"token constant\">FB</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">FB</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">FB</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p>—上面不算意义上的递归，下面这才是递归但是两个输出的结果是一样的<br> <img src=\"https://img-blog.csdnimg.cn/20210502213217651.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<h2><a id=\"_32\"></a>垃圾回收机制</h2> \n<ul><li>就是浏览器会周期性的找出不再使用的变量，将其的标记删除然后释放内存，所以垃圾回收机制会按照内存占用的大小来周期性的执行释放内存</li><li>回收的方式：清楚标记和引用计数</li><li> <h4><a id=\"_35\"></a>因为这个是无法控制的所以也不好演示，是浏览器根据占用内存来执行的</h4> </li></ul> \n<h2><a id=\"js_36\"></a>js的报错类型</h2> \n<p>—报错类型可以更快的帮助我们找到bug并处理掉</p> \n<pre><code class=\"prism language-javascript\"><span class=\"token number\">1.</span> EvalError<span class=\"token punctuation\">:</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//使用和定义不一致的报错；</span>\n<span class=\"token number\">2.</span> RangeError <span class=\"token comment\">//使用的某个数值越界</span>\n<span class=\"token number\">3.</span> SyntaxError <span class=\"token comment\">//使用了非法或者不能被识别的引用数值</span>\n<span class=\"token number\">4.</span> TypeError <span class=\"token comment\">//某种类型的错误</span>\n<span class=\"token number\">5.</span> URIError <span class=\"token comment\">//URI处理函数使用的不当</span>\n</code></pre> \n<h2><a id=\"this_45\"></a>this关键字</h2> \n<p>---- this无法被赋值<br> this是指向某个对象的</p> \n<ul><li>this在全局的作用下是直接指向window</li><li>在其他的作用时，谁调用该函数this就指向谁</li></ul> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{<!-- --></span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李三\"</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<ul><li>第一个this是指向fn、第二是指向window<br> <img src=\"https://img-blog.csdnimg.cn/20210502215504650.jpg#pic_center\" alt=\"在这里插入图片描述\"></li></ul>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'JS递归、垃圾回收机制、js报错类型及this指向', '2021-05-02 21:55:47', 'ljh', '递归\r\n—通俗来讲就是在一个函数体内调用该函数\r\n\r\n就拿斐波那契数列来讲递归，主要是找到规律，斐波那契数列的规律就是前两位加起来的和就是第三', NULL, NULL);
INSERT INTO `blogstwos` VALUES (16, '0', '21', '\n        <div id=\"article_content\" class=\"article_content clearfix\">\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-b5506197d8.css\">\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\n                    </svg>\n                    <h2><a id=\"_0\"></a>怎么使用</h2> \n<ul><li>首先创建一个canvas标签，用自带的高度和宽度属性设置宽高，如果在css里面写宽高会导致画布失帧</li></ul> \n<pre><code class=\"prism language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>canvas<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> \n<ul><li>获取画布和设置画笔，画笔通过canvas.getContext(“2d”)来设置也可以设置3d</li></ul> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//设置画笔</span>\n</code></pre> \n<ul><li>开始绘画，绘画的所有样式比如颜色，都需要在绘画之前设置才能生效，这里先用画布方法实心矩形绘画，fillRect（）一共有四个参数1.-2是x和y轴坐标，开始于画布左上角3-4是绘制大小，</li><li>绘画空心矩形strokeRect（）也有四个参数跟fillRect（）一样</li></ul> \n<pre><code class=\"prism language-javascript\">        context<span class=\"token punctuation\">.</span>shadowColor <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置阴影颜色</span>\n        context<span class=\"token punctuation\">.</span>shadowOffsetX <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置阴影水平距离</span>\n        context<span class=\"token punctuation\">.</span>shadowOffsetY <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        context<span class=\"token punctuation\">.</span>shadowBlur <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置阴影模糊度</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//绘画实心矩形</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/2021051022234978.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ul><li>上面讲到了设置样式必须在绘画之前设置，来看看设置样式</li></ul> \n<ol><li>设置填充样式，就是实行矩形</li></ol> \n<pre><code class=\"prism language-javascript\">context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span>\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<ol start=\"2\"><li>设置空心样式</li></ol> \n<pre><code class=\"prism language-javascript\">context<span class=\"token punctuation\">.</span>strokeStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"black\"</span> \ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">strokeRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210510222720544.jpg#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ul><li>设置线性渐变需要调用createLinearGradient方法来创建渐变这个方法有一个返回值需要接收，然后调用addColorStop()方法设置渐变颜色</li></ul> \n<ol start=\"3\"><li>设置线性渐变</li></ol> \n<pre><code class=\"prism language-javascript\"><span class=\"token keyword\">var</span> grad <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">createLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\ngrad<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//在0-0.2的位置设置红色</span>\ngrad<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//在0.2-0.5设置黄色</span>\ngrad<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//在0.5-0.8设置蓝色</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210511124813178.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTU2ODY3Nw==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p> \n<ul><li>圆形是通过acr方法绘画出来的绘画的是以设置的坐标点中心绘画圆，还需要通过Math.PI，arc（）四个参数1-2是x,y坐标参数3-4是绘画圆以什么点开始绘画什么点结束<br> <img src=\"https://img-blog.csdnimg.cn/202105111302275.jpg#pic_center\" alt=\"在这里插入图片描述\"></li></ul> \n<ol start=\"4\"><li>设置圆形，可以设置空心或实心通过stroke和fill来改变</li></ol> \n<pre><code class=\"prism language-javascript\">        context<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"blue\"</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre> \n<p><img src=\"https://img-blog.csdnimg.cn/20210511125404920.jpg#pic_center\" alt=\"在这里插入图片描述\"></p>\n                </div>\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-d7a94ec6ab.css\" rel=\"stylesheet\">\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-f1c5feb645.css\" rel=\"stylesheet\">\n        </div>\n    ', 'H5的画布标签canvas', '2021-05-11 13:04:38', 'ljh', '怎么使用首先创建一个canvas标签，用自带的高度和宽度属性设置宽高，如果在css里面写宽高会导致画布失帧<canvas id=\"canvas\" width=\"0\" height=\"0\"></canvas>获取画布和设置画笔，画笔通过canvas.getContext(“2d”)来设置也可以设置3dvar canvas = document.getElementById(\"canvas\")var context = canvas.getContext(\"2', NULL, NULL);
INSERT INTO `blogstwos` VALUES (17, '0', '0', '<h1 id=\"\">阿瓦打我打我不敢不敢不该和你换个</h1>', '<h1 id=\"\">阿瓦打我打我不敢不敢不该和你换个</h1>', '2021/7/22下午8:20:12', 'ljh', '<h1 id=\"\">阿瓦打我打我不敢不敢不该和你换个</h1>', '2021-07-22 12:20:52', NULL);
INSERT INTO `blogstwos` VALUES (18, '0', '0', '<p>啊啊啊啊啊啊啊啊啊啊</p>', '<p>啊啊啊啊啊啊啊啊啊啊</p>', '2021/7/22下午8:47:40', 'ljh', '<p>啊啊啊啊啊啊啊啊啊啊</p>', NULL, NULL);

-- ----------------------------
-- Table structure for logins
-- ----------------------------
DROP TABLE IF EXISTS `logins`;
CREATE TABLE `logins`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `admin` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `pwd` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `deletedAt` datetime NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of logins
-- ----------------------------
INSERT INTO `logins` VALUES (1, 'admin', '123456', NULL);

-- ----------------------------
-- Table structure for messages
-- ----------------------------
DROP TABLE IF EXISTS `messages`;
CREATE TABLE `messages`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `like` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `lowss` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `time` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `deletedAt` datetime NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of messages
-- ----------------------------
INSERT INTO `messages` VALUES (7, '1', '1', '1231223', '2021/7/21上午11:35:52', '匿名9542', '2021-07-22 09:08:40');
INSERT INTO `messages` VALUES (8, '4', '2', '你好啊', '2021/7/21上午11:37:17', '匿名2521', NULL);
INSERT INTO `messages` VALUES (9, '0', '0', '555', '2021/7/23下午4:14:13', '匿名4745', NULL);
INSERT INTO `messages` VALUES (10, '0', '0', '个梵蒂冈', '2021/7/23下午4:36:18', '匿名7683', NULL);
INSERT INTO `messages` VALUES (11, '0', '0', '打点', '2021/7/23下午4:37:48', '匿名9411', NULL);
INSERT INTO `messages` VALUES (12, '0', '0', 'sad', '2021/7/23下午4:37:49', '匿名4604', NULL);
INSERT INTO `messages` VALUES (13, '1', '0', 'sad', '2021/7/23下午4:37:50', '匿名8368', NULL);
INSERT INTO `messages` VALUES (14, '0', '0', '阿萨德', '2021/7/23下午4:37:51', '匿名3090', NULL);
INSERT INTO `messages` VALUES (15, '0', '0', '打点', '2021/7/23下午4:38:06', '匿名2648', NULL);
INSERT INTO `messages` VALUES (16, '0', '0', 'fhhvh', '2021/7/23下午5:36:23', '匿名8013', NULL);

-- ----------------------------
-- Table structure for stays
-- ----------------------------
DROP TABLE IF EXISTS `stays`;
CREATE TABLE `stays`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `BlogId` int NOT NULL,
  `like` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `lowss` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `time` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of stays
-- ----------------------------
INSERT INTO `stays` VALUES (7, '安保阿爸阿爸', 95, '2', '2', '2021/7/24 下午1:01:17', '匿名794');
INSERT INTO `stays` VALUES (8, '你你你你你你女', 1, '0', '0', '2021/7/24 下午2:17:44', '匿名166');
INSERT INTO `stays` VALUES (9, '1233213213312', 1, '0', '0', '2021/7/24 下午2:35:23', '匿名6740');
INSERT INTO `stays` VALUES (10, '会更好很尴尬', 95, '0', '0', '2021/7/24 下午2:35:46', '匿名8945');
INSERT INTO `stays` VALUES (11, '爱我的股份', 1, '0', '0', '2021/7/24 下午2:37:31', '匿名6678');

-- ----------------------------
-- Table structure for stays2s
-- ----------------------------
DROP TABLE IF EXISTS `stays2s`;
CREATE TABLE `stays2s`  (
  `id` int NOT NULL AUTO_INCREMENT,
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `BlogId` int NOT NULL,
  `like` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `lowss` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `time` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of stays2s
-- ----------------------------
INSERT INTO `stays2s` VALUES (1, '你你你美年健康磨叽磨叽', 3, '0', '0', '2021/7/24 下午2:40:05', '匿名3334');

SET FOREIGN_KEY_CHECKS = 1;
